<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Wpf | uEN Laboratory]]></title>
  <link href="http://s-ueno.github.io/blog/categories/wpf/atom.xml" rel="self"/>
  <link href="http://s-ueno.github.io/"/>
  <updated>2014-11-17T19:54:33+09:00</updated>
  <id>http://s-ueno.github.io/</id>
  <author>
    <name><![CDATA[uEN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ユーザーコントロールに学ぶ様々なコンテンツ - WPF Vol 07]]></title>
    <link href="http://s-ueno.github.io/blog/2014/11/17/wpf-08/"/>
    <updated>2014-11-17T19:44:57+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/11/17/wpf-08</id>
    <content type="html"><![CDATA[<p>設定メニューの作成を通じて、ユーザーコントロールについて紹介します。</p>

<p><img src="http://s-ueno.github.io/images/wpf-08-01.png" alt="wpf-08-01" /></p>

<!-- more -->


<p>WPFは柔軟で StyleやTemplate、添付プロパティで多くは対応できるのですが、場合によっては以下のようなレベルでコントロールを作成する場面も出てきます。</p>

<ul>
<li>ユーザーコントロール</li>
<li>カスタムコントロール</li>
<li>カスタム要素</li>
</ul>


<p><a href="http://msdn.microsoft.com/ja-jp/library/ms745025.aspx">MSDNにも記載</a>があります。</p>

<p>また、これらをクラス ライブラリとして開発する場合と、アプリケーションとして開発する場合で適用するプログラミング デザインパターンも変わってきます。</p>

<p>本シリーズのビューの基本クラスとなるBizViewクラスはUserControl派生です。
その基本機能を実装する上でMVVMパターンで作成しているかといえば、クラスライブラリとしての基本セットなのでそうではありません。</p>

<h2>ユーザーコントロール</h2>

<p>VisualStudioで、新しい項目を追加する場合に選択できます。<br/>
ベースクラスがUserControlクラスになります。</p>

<p>主な目的は、より要件に具体的なビューを提供済みのコンテンツを組み合わせて構築することです。<br/>
たとえば、BizViewクラスから派生したView/ViewModelの各種コンテンツ(サンプルのVol04View/Vol05Viewなど)も同様に、目的とする画面をボタンやラベルといった提供済みコンテンツを配置して作成しています。</p>

<p>それと比べて、カスタムコントロールやカスタム要素は、WPFの組込済みコントロール(Buttonのベースクラスは)がそうであるように、基本となるコンテンツ作成として利用します。</p>

<p>FrameworkElement派生ではパフォーマンスが向上しますが、実装する際には <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.media.drawingvisual.aspx">DrawingVisual</a> クラスなどを利用して、描画を実装する必要が出てきます。</p>

<p>さて、今回は画面の右側に表示する設定画面をユーザーコントロールで作成します。<br/>
画面は以下の構成で、コンテンツ部には指定したView/ViewModelのセットが追加できるよう検討します。</p>

<p><img src="http://s-ueno.github.io/images/wpf-08-03.png" alt="wpf-08-03" /></p>

<p>ユーザーコントロールなので、Xamlで画面を開発する要領で作成します。</p>

<p>Xamlも上から下まで30行程度です。</p>

<ul>
<li>グリッドをデザイン通りに上下分割</li>
<li>上部にタイトルとアイコン</li>
<li>下部に設定タイトル一覧とメインコンテンツ</li>
</ul>


<p>を配置しています。</p>

<pre><code>&lt;UserControl x:Class="uEN.UI.Controls.Settings"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:uen="clr-namespace:uEN.UI"
             mc:Ignorable="d" 
             Background="{DynamicResource AppBrand}"
             Foreground="White"
             BorderBrush="Transparent"
             d:DesignHeight="300" d:DesignWidth="300"&gt;
    &lt;UserControl.Resources&gt;
        &lt;uen:ViewDataTemplateSelector x:Key="templateSelector" /&gt;
    &lt;/UserControl.Resources&gt;
    &lt;Grid&gt;
        &lt;Grid.RowDefinitions&gt;
            &lt;RowDefinition Height="auto"/&gt;
            &lt;RowDefinition Height="*"/&gt;
        &lt;/Grid.RowDefinitions&gt;
        &lt;StackPanel Margin="10,30,0,30" Orientation="Horizontal"&gt;
            &lt;Button x:Name="IconButton" Width="35" Height="35" Margin="5" 
                    Foreground="White"
                    BorderBrush="White"
                    Style="{DynamicResource EllipseButtonStyle}" 
                    &gt;
                &lt;Viewbox Stretch="Fill"&gt;
                    &lt;Path Style="{DynamicResource PathButtonStyle}"
                          Data="F1 M 33.6458,38L 49.4792,53.8333L 38.7917,53.8333L 22.1667,38L 38.7917,22.1667L 49.4792,22.1667L 33.6458,38 Z "/&gt;
                &lt;/Viewbox&gt;
            &lt;/Button&gt;
            &lt;TextBlock x:Name="Caption" Text="Settings" FontSize="20" VerticalAlignment="Center"/&gt;
        &lt;/StackPanel&gt;
        &lt;ListBox Grid.Row="1" x:Name="SettingViewModels" Visibility="Visible" /&gt;
        &lt;ContentPresenter Grid.Row="1" x:Name="ViewModelPresenter"  
                          ContentTemplateSelector="{StaticResource templateSelector}"
                          /&gt;
    &lt;/Grid&gt;
&lt;/UserControl&gt;
</code></pre>

<p>アイコンのジオメトリも前回同様に<a href="http://modernuiicons.com/">Alex Peattie</a>さんのものを利用しています。</p>

<p>ボタンは丸く描画されるように <code>Style="{DynamicResource EllipseButtonStyle}"</code> としてスタイルをリソースとして切り出し、コンテンツにジオメトリを設定しています。</p>

<p>切り出したスタイルは単に  <code>&lt;Setter Property="Template"&gt;</code> としてControlTemplateを設定する際に、Mindwos 8 Styleではフラットで角なしの線を描画するために <code>&lt;Border&gt;</code> としましたが、これを <code>&lt;Ellipse&gt;</code> として丸にすればそれだけでOKです。</p>

<p>ボタンを押したときの内部動作はコードビハインド上で記述しています。<br/>
(クラス ライブラリとしての開発)</p>

<p>アプリケーション構成ファイルに任意のViewModelを設定すると、それが設定画面の一覧に表示されるようにしました。</p>

<p><img src="http://s-ueno.github.io/images/wpf-08-04.png" alt="wpf-08-04" /></p>

<p>あとは、これをWindow Style で定義しているグリッド上にコンテンツとして配置するだけです。</p>

<h2>アニメーション</h2>

<p>ボタンを押下する度に先ほど作成したユーザーコントロールがWindowとしてモーダル表示されたり、画面上にパッとでたり消えたりするのは、利用者としては新鮮さにかけます。
XAMLで作成するアプリケーションのゴールは、やはり柔軟なアニメーションを利用者に体験してもらうことにあります。</p>

<p>今回は、そんなアニメーションを添付プロパティとして切り出して実装しています。</p>

<pre><code>
  public enum TransitionStyle
    {
        None,

        Slide,
        VerticalSlide,

        SlideOut,
        VerticalSlideOut,
    }

    public class ViewTransition
    {
        public static TransitionStyle GetTransitionStyle(DependencyObject obj)
        {
            return (TransitionStyle)obj.GetValue(TransitionStyleProperty);
        }

        public static void SetTransitionStyle(DependencyObject obj, TransitionStyle value)
        {
            obj.SetValue(TransitionStyleProperty, value);
        }

        // Using a DependencyProperty as the backing store for TransitionStyle.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty TransitionStyleProperty =
            DependencyProperty.RegisterAttached("TransitionStyle", typeof(TransitionStyle), typeof(ViewTransition), new UIPropertyMetadata(TransitionStyle.None, OnTransitionStyleChanged));

        private static void OnTransitionStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var fw = d as FrameworkElement;
            var style = e.NewValue as TransitionStyle?;
            if (!style.HasValue || style == TransitionStyle.None)
                return;

            fw.Loaded -= fw_Loaded;
            fw.Loaded += fw_Loaded;
        }

        static void fw_Loaded(object sender, RoutedEventArgs e)
        {
            var fw = (FrameworkElement)sender;
            var style = GetTransitionStyle(fw);

            Play(fw, style);
        }

        public static Storyboard Play(FrameworkElement target, TransitionStyle style, Action completedAction = null)
        {
            Storyboard storyboard = null;
            switch (style)
            {
                case TransitionStyle.None:
                    break;
                case TransitionStyle.Slide:
                    storyboard = CreateSlideStoryboard();
                    break;
                case TransitionStyle.VerticalSlide:
                    storyboard = CreateVerticalSlideStoryboard();
                    break;
                case TransitionStyle.SlideOut:
                    storyboard = CreateSlideStoryboard(false);
                    break;
                case TransitionStyle.VerticalSlideOut:
                    storyboard = CreateVerticalSlideStoryboard(false);
                    break;
                default:
                    break;
            }
            if (completedAction != null)
                storyboard.Completed += (x, y) =&gt; completedAction();
            storyboard.Begin(target);
            return storyboard;
        }

        private static Storyboard CreateSlideStoryboard(bool isFadeIn = true)
        {
            var storyboard = new Storyboard();

            var fromThickness = isFadeIn ? new Thickness(30, 0, -30, 0) : new Thickness(0);
            var toThickness = isFadeIn ? new Thickness(0) : new Thickness(30, 0, -30, 0);

            var slideAnimation = new ThicknessAnimation();
            slideAnimation.From = fromThickness;
            slideAnimation.To = toThickness;
            slideAnimation.Duration = new Duration(TimeSpan.FromSeconds(0.3));

            Storyboard.SetTargetProperty(slideAnimation, new PropertyPath(FrameworkElement.MarginProperty));
            storyboard.Children.Add(slideAnimation);

            var fromOpacity = isFadeIn ? 0 : 1;
            var toOpacity = isFadeIn ? 1 : 0;

            var opacityAnimation = new DoubleAnimation();
            opacityAnimation.From = fromOpacity;
            opacityAnimation.To = toOpacity;
            opacityAnimation.Duration = new Duration(TimeSpan.FromSeconds(0.5));
            Storyboard.SetTargetProperty(opacityAnimation, new PropertyPath(FrameworkElement.OpacityProperty));
            storyboard.Children.Add(opacityAnimation);

            return storyboard;
        }

        private static Storyboard CreateVerticalSlideStoryboard(bool isFadeIn = true)
        {
            var storyboard = new Storyboard();

            var fromThickness = isFadeIn ? new Thickness(0, 30, 0, -30) : new Thickness(0);
            var toThickness = isFadeIn ? new Thickness(0) : new Thickness(0, 30, 0, -30);


            var slideAnimation = new ThicknessAnimation();
            slideAnimation.From = fromThickness;
            slideAnimation.To = toThickness;
            slideAnimation.Duration = new Duration(TimeSpan.FromSeconds(0.3));

            Storyboard.SetTargetProperty(slideAnimation, new PropertyPath(FrameworkElement.MarginProperty));
            storyboard.Children.Add(slideAnimation);

            var fromOpacity = isFadeIn ? 0 : 1;
            var toOpacity = isFadeIn ? 1 : 0;

            var opacityAnimation = new DoubleAnimation();
            opacityAnimation.From = fromOpacity;
            opacityAnimation.To = toOpacity;
            opacityAnimation.Duration = new Duration(TimeSpan.FromSeconds(0.5));
            Storyboard.SetTargetProperty(opacityAnimation, new PropertyPath(FrameworkElement.OpacityProperty));
            storyboard.Children.Add(opacityAnimation);

            return storyboard;
        }

    }
</code></pre>

<p>Xaml上で設定すれば、コンテンツの読み込み時に自動でアニメーションをするようになります。</p>

<p><img src="http://s-ueno.github.io/images/wpf-08-05.png" alt="wpf-08-05" /></p>

<p>また静的メソッドを利用して、任意のタイミングでも動作します。</p>

<h2>まとめ</h2>

<p>ユーザーコントロールで作成したストアアプリスタイルの設定画面を設け、スタイルの変更ができるようになりました。</p>

<p><img src="http://s-ueno.github.io/images/wpf-08-06.png" alt="wpf-08-06" /></p>

<p><img src="http://s-ueno.github.io/images/wpf-08-07.png" alt="wpf-08-07" /></p>

<p>ただし、設定したユーザー固有のスタイルはまだ永続化していません。<br/>
また、TabControlを利用していますが、このコンテンツはどうしても旧来のWindows Formを彷彿させる、モダンではないビシュアルです。</p>

<p>次回の宿題は、ユーザー固有のスタイルは <a href="http://msdn.microsoft.com/ja-jp/library/system.io.isolatedstorage.aspx">IsolatedStorage</a> の機能を利用して永続化したいと思います。
それと、Controlから派生したItemsControlを利用して、モダンなカスタム コントロールを作成したいと思います。</p>

<p>サンプル成果物はGit管理で。</p>

<p><a href="https://github.com/s-ueno/uENLab">@s-ueno/uENLab</a> on GitHub</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windowに学ぶテンプレートと添付プロパティ - WPF Vol 06]]></title>
    <link href="http://s-ueno.github.io/blog/2014/11/15/wpf-07/"/>
    <updated>2014-11-15T03:19:00+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/11/15/wpf-07</id>
    <content type="html"><![CDATA[<p>従来型の開発ではButtonクラスの外観や機能を変更したい場合は、派生させButtonExカスタムコントロールを作成していました。
しかし前回紹介したように、XamlではButtonクラスにスタイルとテンプレートを適用することで、外観をカスタマイズできることを確認しました。</p>

<p>では今度は Window をストアアプリのようなモダンなものに変えたいと思います。
また、スタイルだけではなくそこで発生するイベントも添付プロパティを利用して、外部から制御したいと思います。</p>

<p><img src="http://s-ueno.github.io/images/wpf-07-01.png" alt="wpf-07-01" /></p>

<!-- more -->


<p>イメージのWindowは <code>var window = new Window();</code> としているだけで、特にStyleを明示的に設定はしていません。</p>

<p><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.application.aspx">System.Windows.Application</a> クラスのリソースに、 <code>&lt;Style TargetType="{x:Type Window}"&gt;</code> と宣言しているリソースディクショナリを登録しているため、デフォルトでこのスタイルで表示されるようになっています。</p>

<p>次に、MSDN で <a href="http://msdn.microsoft.com/ja-jp/library/ms748948.aspx">WPF ウィンドウの概要</a> として紹介している以下の図がわかりやすいのですが</p>

<p><img src="http://s-ueno.github.io/images/wpf-07-02.png" alt="wpf-07-02" /></p>

<p>最小・最大ボタンや境界線などデフォルトで表示されるものをOFFにし、Windowクラスの外観であるクライアント領域内ですべて実装しています。</p>

<p> <code>&lt;Setter Property="Template"&gt;</code> とTemplateを差し替える前までは、お決まりのスタイルである、前景色、背景色、フォントなどをDynamicResource で設定します。</p>

<pre><code>&lt;ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:local="clr-namespace:uEN.UI.AttachedProperties"
                    &gt;
    &lt;Style TargetType="{x:Type Window}"&gt;
        &lt;Setter Property="Foreground"                   Value="{DynamicResource AppForeground}"/&gt;
        &lt;Setter Property="FontFamily"                   Value="{DynamicResource AppFont}"/&gt;
        &lt;Setter Property="FontSize"                     Value="{DynamicResource AppFontSize}"/&gt;
        &lt;Setter Property="Background"                   Value="{DynamicResource WindowTheme}"/&gt;
        &lt;Setter Property="BorderBrush"                  Value="{DynamicResource AppBrand}"/&gt;
        &lt;Setter Property="BorderThickness"              Value="3" /&gt;
        &lt;Setter Property="Focusable"                    Value="False" /&gt;
        &lt;Setter Property="FocusVisualStyle"             Value="{x:Null}"/&gt;
        &lt;Setter Property="WindowStyle"                  Value="None" /&gt;
        &lt;Setter Property="AllowsTransparency"           Value="True" /&gt;
        &lt;Setter Property="ResizeMode"                   Value="CanResizeWithGrip" /&gt;
        &lt;Setter Property="WindowChrome.WindowChrome"&gt;
            &lt;Setter.Value&gt;
                &lt;WindowChrome ResizeBorderThickness="10" /&gt;
            &lt;/Setter.Value&gt;
        &lt;/Setter&gt;
        &lt;Setter Property="Template"&gt;
            &lt;Setter.Value&gt;
                &lt;ControlTemplate TargetType="{x:Type Window}"&gt;
                    &lt;Border BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"&gt;
                        &lt;Grid x:Name="PART_rootGrid"&gt;
                            &lt;Grid.RowDefinitions&gt;
                                &lt;RowDefinition Height="auto"/&gt;
                                &lt;RowDefinition Height="*"/&gt;
                                &lt;RowDefinition Height="auto"/&gt;
                            &lt;/Grid.RowDefinitions&gt;
                            &lt;Grid.ColumnDefinitions&gt;
                                &lt;ColumnDefinition Width="*"/&gt;
                            &lt;/Grid.ColumnDefinitions&gt;
                   ・
                   ・
                   ・
</code></pre>

<p>BorderBrush、BorderThicknessは、<code>&lt;Setter Property="Template"&gt;</code> でこれから差し替えるControlTemplate の最初に</p>

<pre><code>&lt;ControlTemplate TargetType="{x:Type Window}"&gt;
    &lt;Border BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="{TemplateBinding BorderThickness}" 
            Background="{TemplateBinding Background}"&gt;
</code></pre>

<p>としてBorderを用意しTemplateBindingでバインドすることで、画像のように全体の枠線が色付きで表示されるようになっています。</p>

<p>WindowStyleをNone、AllowsTransparencyをTrueとすることで、境界線や最小最大化ボタンの領域が見えなくなります。
ただ、それではWindowを動かせなくなることや、大きさを変更できなくなるので、<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.shell.windowchrome.windowchrome.aspx">WindowChrome.WindowChrome</a> 添付プロパティを利用して、Windowの大きさを変更できるための領域幅を指定した新しいWindowChromeを設定しています。</p>

<p>&#8220;`</p>

<!-- WindowChromeは.Net4.5から提供されている機能 -->


<p><Setter Property="WindowChrome.WindowChrome">
    &lt;Setter.Value>
        <WindowChrome ResizeBorderThickness="10" />
    &lt;/Setter.Value>
</Setter>
&#8220;`</p>

<p>これで、リサイズやWibdowの移動ができるようになります。
あとは作成したい画面構成をイメージしながらGridを利用してレイアウトを区切っていきます。</p>

<p>まず、以下のようにしました。</p>

<p><img src="http://s-ueno.github.io/images/wpf-07-03.png" alt="wpf-07-03" /></p>

<p>Gridを行単位で区切り、上部と下部を可変幅( <code>&lt;RowDefinition Height="auto"/&gt;</code> )、真ん中を領域いっぱいに利用(<code>&lt;RowDefinition Height="*"/&gt;</code>)するように宣言します。</p>

<pre><code> &lt;Grid x:Name="PART_rootGrid"&gt;
     &lt;Grid.RowDefinitions&gt;
         &lt;RowDefinition Height="auto"/&gt;
         &lt;RowDefinition Height="*"/&gt;
         &lt;RowDefinition Height="auto"/&gt;
     &lt;/Grid.RowDefinitions&gt;
     &lt;Grid.ColumnDefinitions&gt;
         &lt;ColumnDefinition Width="*"/&gt;
     &lt;/Grid.ColumnDefinitions&gt;
</code></pre>

<p>こうなると、もう普通のXamlで画面を開発するのと同じように、Style上でControlTemmplateの中身を記述していきます。</p>

<p>まず、Grid上部に対して詳細レイアウトをイメージし、その通りに新しくGridを配置します。</p>

<p><img src="http://s-ueno.github.io/images/wpf-07-04.png" alt="wpf-07-04" /></p>

<pre><code> &lt;!-- Grid.Row="0"として、親のグリッドの最初の行であることを宣言する --&gt;
 &lt;Grid Grid.Row="0" Height="100"&gt;
     &lt;Grid.RowDefinitions&gt;
         &lt;RowDefinition Height="auto"/&gt;
         &lt;RowDefinition Height="auto"/&gt;
         &lt;RowDefinition Height="*"/&gt;
         &lt;RowDefinition Height="auto"/&gt;
     &lt;/Grid.RowDefinitions&gt;
     &lt;Grid.ColumnDefinitions&gt;
         &lt;ColumnDefinition Width="auto"/&gt;
         &lt;ColumnDefinition Width="auto"/&gt;
         &lt;ColumnDefinition Width="*"/&gt;
         &lt;ColumnDefinition Width="*"/&gt;
     &lt;/Grid.ColumnDefinitions&gt;
</code></pre>

<p>次に0列目、4行をまたがっている領域を利用します。</p>

<p><img src="http://s-ueno.github.io/images/wpf-07-05.png" alt="wpf-07-05" /></p>

<p>これは日本人にはなじみ深いExcelのセルをマージする要領ですね。
<code>Grid.Column="0" Grid.RowSpan="4"</code>　とすることで、そのようなマージされた領域を利用できます。</p>

<pre><code>&lt;Border Margin="10,0,5,0" Width="10" Grid.Column="0" Grid.RowSpan="4" Background="{DynamicResource AppBrand}" &gt;
    &lt;Border.RenderTransform&gt;
        &lt;TransformGroup&gt;
            &lt;SkewTransform AngleY="50" /&gt;
        &lt;/TransformGroup&gt;
    &lt;/Border.RenderTransform&gt;
&lt;/Border&gt;
</code></pre>

<p>そこにBorder でブランドカラーの四角形を描画しています。
ただ、その四角形はWPFの強力な2Dグラフィック機能を利用して、少し角度をつけて描画しています。</p>

<p>ブランドに注目を集める事、アプリケーションのテーマカラーを確認できることを目的にしています。</p>

<p>次にブランドを表示する箇所です。同じようにグリッドのセルの座標を指定して領域を確保しますが、ここの文字はアプリケーションによって異なります。
そのため、バインドする必要があります。</p>

<p>このシリースはWindow.ContentにViewModelを、ContentTemplateSelectorを利用してViewを表示しています。</p>

<p>なので、このコンテンツにとって、バインドする際のプロパティまでのパスは、Content.(ViewModelのプロパティ名)とし、それを解決するための相対的な位置をバインディングに指定しています。</p>

<p><img src="http://s-ueno.github.io/images/wpf-07-06.png" alt="wpf-07-06" /></p>

<p>ViewModelの基底クラスにプロパティを用意することで、デフォルトで適用するもしくは開発者がViewModel側で任意に設定して表示することが可能となります。</p>

<pre><code>public string CompanyName
{
    get { return companyName; }
    set { SetProperty(ref companyName, value); }
}
private string companyName = BizUtils.AppSettings("CompanyName", "");
</code></pre>

<p>後は同じようにデザインしていくのですが、今回は最小最大ボタンと設定ボタンという任意のボタンを配置しました。</p>

<p>最大最小のボタン デザイン面では、描画に<a href="http://www.itmedia.co.jp/help/tips/windows/w0288.html">Marlett</a> フォントを利用しています。
また、×ボタンはフォーカスを受け取ると、赤で強調表示されるようにしています。</p>

<p>設定マークは <a href="http://modernuiicons.com/">Alex Peattie</a>さんのフリーのXamlのジオメトリを利用しています。</p>

<p>ただ、レイアウトを用意するのは良いのですが、ここにクリックされた際の実装が必要になります。
そこで登場するのが、添付プロパティです。</p>

<p><img src="http://s-ueno.github.io/images/wpf-07-07.png" alt="wpf-07-07" /></p>

<p><code>local:WindowProxy.Command="Close"</code></p>

<p>WPFの組み込みコントロールクラスとは関係のない、別クラスで宣言した添付プロパティをセットし、処理を注入することができます。</p>

<p>VisualStudioのコードスニペット機能を利用してpropaと入力すると自動で添付プロパティが作成されます。</p>

<p><img src="http://s-ueno.github.io/images/wpf-07-08.png" alt="wpf-07-08" /></p>

<p><img src="http://s-ueno.github.io/images/wpf-07-09.png" alt="wpf-07-09" /></p>

<p>今回はWindowの最小・最大　+　設定ボタンの押下時の処理を実装する添付プロパティクラスを用意しました。</p>

<p><img src="http://s-ueno.github.io/images/wpf-07-10.png" alt="wpf-07-10" /></p>

<p>プロパティ値の変更時に処理が動くメソッドが定義できます。
ここで、ボタンに対してクリック時のイベントをバインドしています。</p>

<p>Styleで外観を刷新でき、処理も添付プロパティを利用して注入できるということは、たとえば、開発者はWPFの組込済みテキストボックスを配置、あとは提供されている任意の添付プロパティを選択すれば、自動で数値用テキストボックスや入力自動補完テキストボックスなどに差し替わることが可能となります。</p>

<p>ちなみに、Buttonクラスは<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.primitives.buttonbase.command.aspx">Button.Command</a>プロパティが用意されていて、ここに組み込み済みのICommandを割り当てることもできます。
たとえば、<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.systemcommands.aspx">SystemCommands</a>などです。</p>

<p>そうなのですが・・・・MSもどうしてICoomandをプロパティに持つという条件付の機能にしたのでしょうか？
それこそ添付プロパティとして、任意のルーティングイベントと紐付けられるように提供してくれれば、良かったのですが。</p>

<p>なぜかというと、前回のようにボタンから不要な機能をすべて削り落としていくと</p>

<p><img src="http://s-ueno.github.io/images/wpf-06-08.png" alt="wpf-06-08" /></p>

<p>もうテンプレートの中にはCommandプロパティを持つButtonの要素は存在しないのですよね。。。</p>

<pre><code>    &lt;Style x:Key="ModernButtonStyle" TargetType="{x:Type Button}" &gt;
        &lt;Setter Property="Template"&gt;
            &lt;Setter.Value&gt;
                &lt;ControlTemplate TargetType="Button"&gt;
                    &lt;TextBlock Name="chrome" 
                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"&gt;
                        &lt;ContentPresenter /&gt;
                    &lt;/TextBlock&gt;
                    &lt;ControlTemplate.Triggers&gt;
                        &lt;Trigger Property="IsMouseOver" Value="true"&gt;
                            &lt;Setter TargetName="chrome" Property="TextBlock.TextDecorations" Value="Underline" /&gt;
                        &lt;/Trigger&gt;
                    &lt;/ControlTemplate.Triggers&gt;
                &lt;/ControlTemplate&gt;
            &lt;/Setter.Value&gt;
</code></pre>

<p>TextBlockとContentPresenterしか要素がないので、Commandを設定しても動きません。
この制約は、添付プロパティの自由度と比べると見劣りしてしまいます。</p>

<p>ちなみに、今回はまだ設定ボタン押下時の処理を実装していません。
次回は、この設定ボタンを押下すると、アニメーションしながら設定画面が表示されるようにしたいと思います。</p>

<p>サンプル成果物はGit管理で。</p>

<p><a href="https://github.com/s-ueno/uENLab">@s-ueno/uENLab</a> on GitHub</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buttonに学ぶテンプレートとスタイル - WPF Vol 05]]></title>
    <link href="http://s-ueno.github.io/blog/2014/11/11/wpf-06/"/>
    <updated>2014-11-11T23:58:00+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/11/11/wpf-06</id>
    <content type="html"><![CDATA[<p>Buttonの外観を通じて、テンプレートおよびスタイルについて紹介します。</p>

<p><img src="http://s-ueno.github.io/images/wpf-06-01.png" alt="wpf-06-01" /></p>

<!-- more -->


<h2>Windows 7 スタイル</h2>

<p>WPFがこのお馴染みのスタイルを描画するためには、以下のような要件を適用しています。</p>

<ul>
<li>キーボードフォーカス(入力デバイスがキーボードがミソ。マウスじゃないよ)が入ると、ボタンの枠よりマージン2だけ小さい領域に指定した間隔の点線を描画</li>
<li>論理フォーカスが入ると、ButtonChromeクラスがゴニョゴニョして、ボタンの後ろ側にあるコンテンツの色がアクセント色になる</li>
<li>背景色は上から下に向かい、高さの半分からグラデーションで描画</li>
<li>マウスがボタンの上にくるとボタンの色がアクセント色になる</li>
<li>ボタンの上でマウスが押されている状態時に、ボタンの前景色を濃くする</li>
<li>ボタンの文字は、内部的にContentPresenterに文字を設定しているので、自動でTextBlock化して表示されている</li>
</ul>


<p>などなどキリがありませんが、これらの要件をXAMLのスタイル上で以下のように表現しています。</p>

<p>&#8220;`</p>



<p><LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
    <GradientStop Color="#F3F3F3" Offset="0"/>
    <GradientStop Color="#EBEBEB" Offset="0.5"/>
    <GradientStop Color="#DDDDDD" Offset="0.5"/>
    <GradientStop Color="#CDCDCD" Offset="1"/>
</LinearGradientBrush>
<SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/></p>



<pre><code>
このStyleですが、VisualStudio上で以下のように右クリックで簡単に取得できます。

![wpf-06-02]


XAML上に `&lt;Button Width="150" Height="50" Content="送信する" x:Name="SampleButton"/&gt;` と定義するだけで、内部的にはButton用スタイルが自動で適用されているわけです。
ボタン自体のスタイルは `&lt;Style x:Key="AeroButtonStyle" TargetType="{x:Type Button}"&gt;` から始まります。


 `x:Key="AeroButtonStyle"` とキー指定している場合は、XAML上で明示的にキーを設定しないと適用されません。


キー指定せずに `&lt;Style TargetType="{x:Type Button}"&gt;` とStyle定義すると、全てのボタンのスタイルがこれから定義するStyleに自動で従うようになります。  
また、 `&lt;Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}"&gt;` と、BasedOnを指定することで、元になる定義済みのスタイルを適用した上で任意のスタイルを上書きすることもできます。


 `&lt;Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/&gt; `
ですが、TargetTypeが Button で Property名が "FocusVisualStyle" つまり [Button.FocusVisualStyle] プロパティに対して、Value=で "ButtonFocusVisual" というキー名の値を設定していることを表します。


このキー名に一致するものは、以下のようになっています・
</code></pre>



<pre><code>
Margin="2" で StrokeThickness="1" StrokeDashArray="1 2"のRectangleを描画していますね。  
確かにTabでキーボードフォーカスを入れると、ちょっと小さな枠に点線で四角が描画されていませんか？


![wpf-06-03]


WPFが標準で提供する組込みコントロールも、最小限の部品（LabelやTextBlock、Rectangle）を組み合わせて構成されていることがわかります。
なので、これら最小限の部品に対しては、デフォルトでスタイルが適用されるようなことをやってはなりません。

 `&lt;Style TargetType="{x:Type TextBlock}"&gt;` とかすると、TextBlockはいたるところで利用されているので画面がまともに描画されなくなります。

といっても、テキストブロック用のStyleを用意したい場合には `&lt;Style x:Key="MyTextBlock" TargetType="{x:Type TextBlock}"&gt;` のようにキーを明示的に宣言して、他のコントロールに影響がでないようにします。


次に `&lt;Setter Property="` とプロパティ値をカスタマイズしていきますが、この際にスタイルをダイナミックに適用することもできます。

 `&lt;Setter Property="Background" Value="{DynamicResource MyBackgroundBrush}"/&gt; `

[DynamicResource]ですが、これは要素が実際にテンプレートを必要とする（描画）段階で、キー名で検索して適用します。
StaticResourceが定数としたら、DynamicResourceは書き換え可能な変数というところでしょうか。


アプリケーションはそのブランドイメージに見合う色などがあります。
このブログも今は白とブルーを基調としたイメージカラーになっています。
このようなイメージカラーをたとえば、カラーピッカーなどを利用してアプリケーションの実行中にダイナミックに変更することが可能になります。


テンプレート
---


Xamlを利用して、様々なStyleを作成していく中で、 `&lt;Setter Property="Template"&gt; ` については、特別な意味があります。
[Button.Template] プロパティは、このボタンの外観に関する全てを新しく書き換えることを意味します。


Windows7のAeroスタイル例を整理しながら説明します。
</code></pre>

<p><Setter Property="Template">
    &lt;Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
            &lt;Themes:ButtonChrome x:Name=&ldquo;Chrome&rdquo; BorderBrush=&ldquo;{TemplateBinding BorderBrush}&rdquo; Background=&ldquo;{TemplateBinding Background}&rdquo; RenderMouseOver=&ldquo;{TemplateBinding IsMouseOver}&rdquo; RenderPressed=&ldquo;{TemplateBinding IsPressed}&rdquo; RenderDefaulted=&ldquo;{TemplateBinding IsDefaulted}&rdquo; SnapsToDevicePixels=&ldquo;true&rdquo;>
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            &lt;/Themes:ButtonChrome>
        </ControlTemplate>
    &lt;/Setter.Value>
</Setter>
&#8220;`</p>

<p><code>&lt;ControlTemplate TargetType="{x:Type Button}"&gt;</code> として、Buttonの外観を再定義しています。</p>

<p>その中身は <code>&lt;Themes:ButtonChrome ・・・</code> として、<a href="http://msdn.microsoft.com/ja-jp/library/microsoft.windows.themes.buttonchrome.aspx">Microsoft.Windows.Themes.ButtonChrome</a> クラスを指定しています。
仮にココにCheckBoxを指定した場合は、開発者はButtonをXamlに定義しているにもかかわらず、実行してみると画面上にはチェックボックスが表示されることになります。これがテンプレートです。</p>

<p>各種プロパティに設定している<a href="http://msdn.microsoft.com/ja-jp/library/ms742882.aspx">TemplateBinding</a>は、別のコントロール プロパティ値を参照するバインディング機能になります。
ここでは、ButtonChrome.BorderBrushは、ControlTemplateで定義されているButton(つまりもともとのコントロール)のBorderBrush値を参照するように設定されています。</p>

<p><a href="http://msdn.microsoft.com/ja-jp/library/ms742882.aspx">TemplateBinding</a> はより具体的で柔軟な設定を可能とし、例えば2個上の親コンテンツのプロパティ値や、指定した親の型が見つかればその値を利用するなど、カスタム コントロールを作成するレベルでは、とても重宝するバインディング機能の一つです。</p>

<p>WPFはバインディングとテンプレートが肝要と紹介する所以です。</p>

<p><code>&lt;ContentPresenter ・・・</code> は Botton.Contentプロパティに設定した&#8221;送信する&#8221;という表示文字列が、ContentPresenterに設定された結果、前に説明した通りTextBlockとして画面に表示されることになります。</p>

<p>WPFのデバック機能で、ビジュアライザーというものがあります。
これを通して、外観を確認すると、なるほどとなります。</p>

<p>サンプルボタン</p>

<p><img src="http://s-ueno.github.io/images/wpf-06-04.png" alt="wpf-06-04" /></p>

<p>そのテンプレートの最終的なContentPresenter</p>

<p><img src="http://s-ueno.github.io/images/wpf-06-05.png" alt="wpf-06-05" /></p>

<p>次に、先ほどは省略しましたが ControlTemplate に、<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.controltemplate.triggers.aspx">ControlTemplate.Triggers</a> プロパティ値を設定していたと思います。</p>

<pre><code>&lt;ControlTemplate.Triggers&gt;
    &lt;Trigger Property="IsKeyboardFocused" Value="true"&gt;
        &lt;Setter Property="RenderDefaulted" TargetName="Chrome" Value="true"/&gt;
    &lt;/Trigger&gt;
    &lt;Trigger Property="ToggleButton.IsChecked" Value="true"&gt;
        &lt;Setter Property="RenderPressed" TargetName="Chrome" Value="true"/&gt;
    &lt;/Trigger&gt;
    &lt;Trigger Property="IsEnabled" Value="false"&gt;
        &lt;Setter Property="Foreground" Value="#ADADAD"/&gt;
    &lt;/Trigger&gt;
&lt;/ControlTemplate.Triggers&gt;
</code></pre>

<p>これがXAMLが単なる<a href="http://ja.wikipedia.org/wiki/%E3%83%87%E3%83%BC%E3%82%BF%E8%A8%98%E8%BF%B0%E8%A8%80%E8%AA%9E">データ記述言語</a>よりも優れていて、なんらかのイベント トリガーをキーに動的にプロパティ値を変更することができる技術になります。</p>

<p>キーボードフォーカスを受け取ったときや、非活性時にはそれに見合ったスタイルを動的に適用することができます。</p>

<p>こういった様々なXAML上の技術が適用されてWindows7のAeroスタイルが適用されていますが、ここで考えたいのが</p>

<blockquote><p>“What is the difference between art and design?”（デザインとアートの違いとは何か？）</p>

<p>”Design solves a problem, art is expression”（デザインとは問題解決であり、アートとは自己表現である。）</p>

<p>Why?をBecauseで説明出来なければ、それは明らかにデザインではない</p></blockquote>

<p>です。</p>

<p>これを素で開発するとした場合は、開発者には高い技術力を求め、OSもこれを描画するための高いコストを支払います。
果たして、これに対して Because を説明できるでしょうか？</p>

<p>そうした結果が、Windows8 Styleや Flat Ftyleにつながりますが、果たしてまだ最適化はできないものでしょうか？</p>

<h2>Windows8 Style</h2>

<p><img src="http://s-ueno.github.io/images/wpf-06-06.png" alt="wpf-06-06" /></p>

<p>Flat Styleはボタンを押下すると、ブランド カラー が表示されています。<br/>
どちらも、無駄なグラデーションなどはなくなりました。</p>

<p>Windows 8 で、同じようにXaml上で右クリック-テンプレートの編集から、適用されているXAMLのスタイルが簡単にコピーできます。</p>

<p>&#8220;`</p>



<pre><code>
Wibndows 7 のAeroスタイルよりもまだ描画コストは減りましたが、あんまり変わりませんね。
もっと、最適化できないか？削れないか？本当にそれは必要か？と考えた際にたどり着くのがModern Styleになります。



Modern Style
---

もはやボタン枠すらもありませんが、確かにユーザーはそれを押下できるコンテンツと認識でき、何が起こるかを理解できます。

![wpf-06-07]


こうなると、XAML上のスタイルも簡単で、OSもこれを描画するためにコストはかけません。  
かといって、ユーザーがこれを退屈なコンテンツと認識するかといえば、とてもモダンな雰囲気を受けます。
</code></pre>



<p>&#8220;`</p>

<p>もはやスタイルは必要最低限で、しかしマウスが乗るとそれが実行可能なコンテンツであることを即座に理解できます。</p>

<p><img src="http://s-ueno.github.io/images/wpf-06-08.png" alt="wpf-06-08" /></p>

<p>ブランドカラーをカスタマイズもできます。
しかも、これはアプリケーション ポリシーのようなもので、開発者はただ単にXaml上でButtonと定義しただけにもかかわらず、自動的にこのスタイルが適用されることになります。</p>

<p>LOB開発が、モダンで先進的なWebデザインに一矢報いることも夢ではありません。</p>

<p>いつものごとく、サンプル成果物はGit管理で。</p>

<p><a href="https://github.com/s-ueno/uENLab">@s-ueno/uENLab</a> on GitHub</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WPF ViewModelでLOB開発 Vol 04 - コンポジットWPF　おまけでMEF]]></title>
    <link href="http://s-ueno.github.io/blog/2014/10/31/wpf-04/"/>
    <updated>2014-10-31T17:50:00+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/10/31/wpf-04</id>
    <content type="html"><![CDATA[<p>サンプル成果物はGit管理するようにしました。</p>

<p><a href="https://github.com/s-ueno/uENLab">@s-ueno/uENLab</a> on GitHub</p>

<p>今回は、以前からお話ししていましたコンポジットWPFの片鱗と、おまけで <a href="http://msdn.microsoft.com/ja-jp/library/dd460648.aspx">MEF</a> という.Net Frameworkが提供する <a href="http://ja.wikipedia.org/wiki/%E4%BE%9D%E5%AD%98%E6%80%A7%E3%81%AE%E6%B3%A8%E5%85%A5">DI</a> について紹介します。</p>

<!-- more -->


<p>コンポジット アプリケーション は動いている画面を見ると1画面なのですが、開発時には複数のコントロールを組み合わせて動くような仕組みになります。
Windows Formの頃はユーザーコントロールとして作成していましたが、ここで利用しているコンテンツ（View/ViewModelセット）には区別はありません。</p>

<p>サンプルを起動すると以下の画面が起動します。</p>

<p><img src="http://s-ueno.github.io/images/wpf-04-01.png" alt="wpf-04-01" /></p>

<p>フレキシブル レイアウトなので、画面を大きくすれば自動でリサイズします。</p>

<p>ShellViewクラスはTabControlを持ち、TabItemとしてアサインしているのものはVol04Viewクラスです。</p>

<p>Vol04Viewクラスには、前回作成した必須入力ルールをテキストボックスに適用しており、ボタン押下のタイミングで検証エラーを検知してアプリケーション例外（業務例外ともいい、致命的な例外とは区別します）をスローします。
ここにMEFの機能を利用して、例外が業務例外ならばその内容を警告メッセージボックスとして表示する仕組みを注入しています。</p>

<ul>
<li>コンポジット構成</li>
<li>MEFによる業務固有処理の抽入</li>
</ul>


<p>それぞれについて紹介します。</p>

<h2>コンポジット構成</h2>

<p>MVVMデザイン パターンでは、どのデータ（ViewModel）をどういう外観で描画する（View）というセットをコンテンツとして取り扱います。</p>

<p>Window が持つ唯一のContentプロパティには、ContentPresenterがあり、コンテンツを表現する箱として機能します。</p>

<p>ContentにViewModelをセットし、このコンテンツの外観を決定するDataTemplateSelectorを利用して、ViewModelの属性として表現したViewを適用しています。</p>

<p>この仕組みはどのようなコンテンツでも適用できます。今回利用した<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.tabcontrol.aspx">TabControl</a>を確認してみます。</p>

<p><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.tabcontrol.aspx">TabControl</a>は<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.primitives.selector.aspx">Selector</a>,<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemscontrol.aspx">ItemsControl</a>とベースクラスに持ちます。</p>

<p><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemscontrol.aspx">ItemsControl</a>は複数のコンテンツを持つベースとなるクラスです。<br/>
<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.primitives.selector.aspx">Selector</a>は、その複数コンテンツは選択および非選択ができる機能のベースクラスです。<br/>
<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.tabcontrol.aspx">TabControl</a>はそれらの機能を持ち、各コンテンツにセットでHeaderコンテンツを持つクラスになります。</p>

<p>個人的には<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemscontrol.aspx">ItemsControl</a>、<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.primitives.selector.aspx">Selector</a>までは優秀なのですが、これを使って作った<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.tabcontrol.aspx">TabControl</a>はちょっと残念な気がしています。
もっと利便性が高い、複数コンテンツを選択可能なコントロールを作成するのはとても簡単なので、シリーズの中で紹介したいと思います。</p>

<p>さておき、<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemscontrol.aspx">ItemsControl</a>などの複数のコンテンツを持つクラスは、大きく二つの機能を利用します。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemscontrol.itemssource.aspx">ItemsControl.ItemsSource</a> プロパティ</li>
<li><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemscontrol.itemtemplateselector.aspx">ItemsControl.ItemTemplateSelector</a> プロパティ</li>
</ul>


<p>ItemsSourceは、その通り複数のデータを設定するプロパティです。
ItemTemplateSelectorは、DataTemplateSelectorと同じで、それぞれのデータはどのような外観なのかを選択するための機能になります。</p>

<p>WindowではContentは一つでしたが、ItemsSourceは複数のコンテンツをセットします。
このセットする際に利便性が高いものが <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.listcollectionview.aspx">ListCollectionView</a> クラスです。</p>

<p>このクラスは外観を持たないコレクションクラスであり、ViewとViewModelに分離したデザインではViewModel側で利用するクラスになります。</p>

<p>ただ、このコレクションにバインドしている外観がもし選択および非選択ができる機能を有するのであれば、そこに指示するMoveCurrentToメソッドなどを持つ、かゆいところに手が届くクラスになります。
このクラスでフィルタリングして10件を2件とした場合なども、外観にも反映され10タブを2タブにしたりすることができます。</p>

<p>ShellView/ShellViewModel クラスはこのコレクションを管理する機能になります。
コンテンツの実体はVol04View/Vol04ViewModelクラスです。</p>

<p>コンポジット アプリケーションではオブジェクト指向を意識しなくても、柔軟なクラス分割を可能とし、それによって同時開発による生産性の向上や保守性の向上、またパフォーマンス向上も期待できます。</p>

<p>業務要件で複雑なTab機能を有する画面を1つのクラスで作成すると、1万STEPを超えるような複雑怪奇なクラスを作りかねないのですが、このような仕組みではどのようなリッチな画面構成でも、シンプルに作成できます。</p>

<h2>MEF</h2>

<p>DIを利用したことがなければピンとこないかもしれません。<br/>
要はインターフェイスに対して、後付けでインスタンスを割り当てることができる機能になります。</p>

<p>LOB開発では様々な横断的関心事が出てきますが、その中には業務要件固有であるものも少なくありません。</p>

<p>業務固有要件なので、システム毎に開発者が用意する機能であり、且つ横断的な関心事であればそれをあちこちでサービス呼び出しするようなことを適用したくない場合に、有効に活用できます。</p>

<p>MEFを利用するためには参照設定で「System.ComponentModel.Composition」を追加する必要があります。</p>

<p>サンプルのSimpleAppプロジェクトにはExceptionPolicyクラスがあります。
このクラスはIExceptionPolicyインターフェイスを実装しています。</p>

<p>このIExceptionPolicyインターフェイスを宣言し、利用しているプロジェクトはuENプロジェクトですが、実際にこのインターフェイスを実装している箇所はありません。
仮にこのインターフェイスに実体が与えられていれば、それを動かすというコーディングのみがあります。</p>

<p>MEFが提供するImport属性を宣言しているので、仮にMEF機能が働けばここにインスタンスがインポートされるイメージになります。
開発者は、このインターフェイスを実装するクラスに対してExport属性を付与することで、そのクラスが適用される仕組みになります。</p>

<p>MEFを利用するにもおまじないコードは必要なのですが、今回はRepositoryクラスを用意しました。</p>

<pre><code>
  public static class Repository
    {
        private static readonly List&lt;ComposablePartCatalog&gt; catalogList = new List&lt;ComposablePartCatalog&gt;();
        static Repository()
        {
            var assemblies = ConfigurationManager.GetSection("Repository.AssemblyCatalog") as NameValueCollection;
            foreach (var each in assemblies.AllKeys)
            {
                var assembly = LoadAssembly(each);
                if (assembly != null)
                {
                    catalogList.Add(new AssemblyCatalog(assembly));
                }
            }

            var types = ConfigurationManager.GetSection("Repository.TypeCatalog") as NameValueCollection;
            foreach (var each in types.AllKeys)
            {
                var type = LoadType(each);
                if (type != null)
                {
                    catalogList.Add(new TypeCatalog(type));
                }
            }

            var catalog = new AggregateCatalog();
            foreach (var each in catalogList)
            {
                catalog.Catalogs.Add(each);
            }
            container = new CompositionContainer(catalog);
        }
        private static Assembly LoadAssembly(string s)
        {
            Assembly assembly = null;
            try
            {
                assembly = Assembly.Load(s);
            }
            catch
            {
            }
            return assembly;
        }
        private static Type LoadType(string s)
        {
            Type type = null;
            try
            {
                type = Type.GetType(s);
            }
            catch
            {
            }
            return type;
        }

        private static CompositionContainer container;
        public static void Compose(this object obj)
        {
            container.ComposeParts(obj);
        }
    }
</code></pre>

<p>このリポジトリが構成ファイルから読み込むべき対象を抽出して実体化可能な状態にセットします。
利用する際には、Import属性を持つクラスのコンストラクタでCompose拡張メソッドを呼び出すことで、そのインターフェイスに自動でインスタンスが割り当てられる仕組みになります。</p>

<p>以下のように利用しています。
&#8220;`
    public class ActionEventPolicyAttribute : Attribute, IRoutedEventPolicy
    {
        public ActionEventPolicyAttribute()
        {
            this.Compose();
        }
        [Import(typeof(IExceptionPolicy))]
        public IExceptionPolicy ExceptionPolicy { get; set; }</p>

<pre><code>
アプリケーション構成ファイル(app.config)ですが、configSectionsを利用することで、任意のセクションを追加することが可能になります。
これはmachin.configでも利用されているセクションです。


ここに二つのレベルで依存性を注入できるようにしています。

 + アセンブリの中にあるExport属性の全てをMEFのカタログに登録する
 + アセンブリの中でも特定のクラスのみをMEFのカタログに登録する

これによって、柔軟で且つソースコードの変更をかけずに機能を差し替えることが可能となります。


app.config
</code></pre>

<p>&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
<configuration>
  <configSections>
    <section name="Repository.AssemblyCatalog" type="System.Configuration.NameValueSectionHandler" />
    <section name="Repository.TypeCatalog" type="System.Configuration.NameValueSectionHandler" />
  </configSections>
  &lt;Repository.AssemblyCatalog>
    <add key="uEN" value="" />
    <add key="SimpleApp" value="" />
  &lt;/Repository.AssemblyCatalog></p>

<p>  &lt;Repository.TypeCatalog>
  &lt;/Repository.TypeCatalog>
&#8220;`</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WPF ViewModelでLOB開発 Vol 03 - バインディング]]></title>
    <link href="http://s-ueno.github.io/blog/2014/10/08/wpf-03/"/>
    <updated>2014-10-08T12:00:00+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/10/08/wpf-03</id>
    <content type="html"><![CDATA[<p>これまでは必要最低限の予備学習でしたが、本質に切り込んで <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.aspx">バインディング</a> について紹介します。<br/>
WPFの肝要は バインディングとテンプレートだと言えるくらい重要です。</p>

<p>今回はDateTimeを表示するだけの簡単なサンプルですが、WPF プロパティ システム の仕組みを覗いてみたいと思います。</p>

<p><img src="http://s-ueno.github.io/images/wpf-03-07.png" alt="wpf-03-07" /></p>

<!-- more -->


<p>前回までと同じですが、今度はViewModelのプロパティがDateTime型となっており、バインディング時に一つだけ表示書式が適用されています。</p>

<h2>ViewModel</h2>

<pre><code>    [VisualElements(typeof(BizViewModelName1View))]
    public class BizViewModelName1ViewModel : BizViewModel
    {
        public DateTime? SampleDate
        {
            get { return _sampleDate; }
            set
            {
                SetProperty(ref _sampleDate, value);
            }
        }
        private DateTime? _sampleDate = DateTime.Now;

        public void SampleAction()
        {
            MessageBox.Show(SampleDate.GetValueOrDefault().ToString("yyyy年MM月dd日"));
        }
    }
</code></pre>

<h2>Xaml</h2>

<pre><code>&lt;TextBox Name="SampleTextBox" Text="{Binding Path=SampleDate, StringFormat=yyyy年MM月dd日}"/&gt;
</code></pre>

<p>TextBox.Text プロパティにBindingクラスの指定と、<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.path.aspx">Path</a> プロパティおよび<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.bindingbase.stringformat.aspx">StringFormat</a> プロパティを指定しています。
C#で記述するとしてもほぼ同じことを記述します。</p>

<pre><code>BindingOperations.SetBinding(SampleTextBox, TextBox.TextProperty, new Binding("SampleDate") { StringFormat = "yyyy年MM月dd日" });
</code></pre>

<p>WPF プロパティ システムを理解するということは、このBindingクラスの利用方法に他なりません。
どういうことか動かしながら確認したいと思います。</p>

<p>今まで通り、ボタンを押下するとViewModelのプロパティから値を取得してメッセージボックスを表示するアプリケーションです。</p>

<p><img src="http://s-ueno.github.io/images/wpf-03-08.png" alt="wpf-03-08" /></p>

<p>テキストボックスにキー入力で日付を変えボタンを押下すると、それがViewModelに自動で反映されている状態です。</p>

<p><img src="http://s-ueno.github.io/images/wpf-03-09.png" alt="wpf-03-09" /></p>

<p>現在、Binding クラスにはStringFormat以外何も指定していないにもかかわらず、いくつかの規定の動作が注入されています。<br/>
Binding クラスの機能を全て紹介するのは大変ですが、上記を通じて基本的なものを紹介します。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.mode.aspx">Mode</a> プロパティ</li>
<li><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.updatesourcetrigger.aspx">UpdateSourceTrigger</a> プロパティ</li>
<li><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.validationrules.aspx">ValidationRules</a> プロパティ</li>
<li><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.converter.aspx">Converter</a> プロパティ</li>
</ul>


<h2><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.mode.aspx">Mode</a> /  <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.updatesourcetrigger.aspx">UpdateSourceTrigger</a></h2>

<p>まず、現在の動作を確認するとTextBox.Text プロパティにキーボード入力で値を設定し、
ボタンを押下した（テキストボックスからフォーカスが外れた）タイミングでViewModelに画面上のデータが送信されています。</p>

<p>これは<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.mode.aspx">Mode</a> プロパティと<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.updatesourcetrigger.aspx">UpdateSourceTrigger</a> プロパティが関係しています。</p>

<p>TextBox.Text プロパティにバインディングした場合ですが、<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.mode.aspx">Mode</a> のデフォルト値は BindingMode.TwoWay となっています。<br/>
テキストボックスなのでキーボード入力が前提で、ViewModelのデータも表示する必要があるため、お互いにデータを双方向でやり取りするモードとなっています。</p>

<p>これがラベルのようにキーボード入力がない場合は、デフォルトのモードは OneWay となります。
多くの提供されているWPFコンテンツは Default で適切ですが、これを変更することができるのが<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.mode.aspx">Mode</a> プロパティです。</p>

<p>先ほどの画面で<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.mode.aspx">Mode</a> プロパティに OneWay と設定した場合、以下のようにViewModelにはデータが反映されなくなります。</p>

<p><img src="http://s-ueno.github.io/images/wpf-03-10.png" alt="wpf-03-10" /></p>

<p>次に、ロストフォーカスでView上のデータがViewModelに自動転送されている設定ですが、MSDNに記述があります。</p>

<blockquote><p>TextBox.Text プロパティの UpdateSourceTrigger の既定値は LostFocus です。</p></blockquote>

<p>WPF プロパティ システム はこれらの設定が既定で適用されている結果、開発者が深く意識しなくても動くアプリケーションが構築できるようになっています。</p>

<p>テキストボックスがロストフォーカス時にViewModelに値を転送するのには理由があります。</p>

<p>TextBox.Text プロパティはキー入力およびIMEでの候補を選択中でも値が変わります。
仮に UpdateSourceTrigger を PropertyChanged に、つまりText プロパティが変わる（≒キータイピング）のたびに
ViewModelへとデータ送信するようになると、想像通りアプリケーションは機能しなくなります。</p>

<h2><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.validationrules.aspx">ValidationRules</a></h2>

<p>ところで、ViewModel上はDateTime型で値を保持しているので、先ほどのテキストボックスで日付に変換できないような値を入力した場合、どうなるでしょう？
試してみます。</p>

<p><img src="http://s-ueno.github.io/images/wpf-03-11.png" alt="wpf-03-11" /></p>

<p>ボタンを押下するためにフォーカスを外れると&hellip;</p>

<p><img src="http://s-ueno.github.io/images/wpf-03-12.png" alt="wpf-03-12" /></p>

<p>テキストボックスが赤枠表示され、デバックログにはエラーがあった旨が出力されています。</p>

<pre><code>System.Windows.Data Error: 7 : ConvertBack cannot convert value '2014年10月99日' (type 'String'). BindingExpression:Path=SampleDate; DataItem='BizViewModelName1ViewModel' (HashCode=21817343); target element is 'TextBox' (Name='SampleTextBox'); target property is 'Text' (type 'String') FormatException:'System.FormatException: 文字列で表される DateTime がカレンダー System.Globalization.GregorianCalendar でサポートされていません。
   場所 System.DateTime.Parse(String s, IFormatProvider provider)
   場所 System.Convert.ToDateTime(String value, IFormatProvider provider)
   場所 System.Convert.ChangeType(Object value, Type conversionType, IFormatProvider provider)
   場所 System.Windows.Data.BindingExpression.ConvertBackHelper(IValueConverter converter, Object value, Type sourceType, Object parameter, CultureInfo culture)'
</code></pre>

<p>これは<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.validationrules.aspx">ValidationRules</a> プロパティに深く関係する、入力値の妥当性検証が規定で実行された結果になります。</p>

<p>この機能は奥深く、大きく三つのことを検討しなければなりません。</p>

<ul>
<li>検証ルールの定義</li>
<li>検証結果の視覚的フィードバック</li>
<li>検証を実行するタイミング</li>
</ul>


<p>これについてもMSDNに丁寧な記載があります。</p>

<blockquote><p>カスタム ErrorTemplate を提供しない場合、検証エラーがあった際にユーザーに視覚的にフィードバックするために、既定のエラー テンプレートが使用されることに注意してください。 詳細については、「データ バインドの概要」の「データの検証」を参照してください。 さらに WPF は、バインド ソース プロパティの更新中にスローされる例外をキャッチするための、組み込みの検証規則を提供します。 詳細については、「ExceptionValidationRule」を参照してください。</p></blockquote>

<p>先ほど学習したように、TextBox.Text プロパティの規定の<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.mode.aspx">Mode</a> プロパティは TwoWay つまり双方向通信します。<br/>
さらにそのタイミングを決定する<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.updatesourcetrigger.aspx">UpdateSourceTrigger</a> プロパティは LostFocus のため、フォーカスが外れるタイミングでバインド ソース プロパティ、つまりViewModelのプロパティを更新します。
ただし、2014年10月99日はDateTime型に変換できずエラーが発生した結果、組み込みの検証規則ExceptionValidationRuleが実行、赤枠の規定エラーテンプレートが適用されました。</p>

<ul>
<li>検証ルール

<ul>
<li>バインド ソース プロパティの更新中にスローされる例外をキャッチするための、組み込みの検証規則</li>
</ul>
</li>
<li>結果の外観

<ul>
<li>検証エラーがあった際にユーザーに視覚的にフィードバックするために、既定のエラー テンプレート</li>
</ul>
</li>
<li>検証を実行するタイミング

<ul>
<li>バインド ソース プロパティの更新（ViewのデータをViewModelへ送信しようとするタイミング）</li>
</ul>
</li>
</ul>


<p>これらが全て規定動作で動いた結果、現在の状態になっています。</p>

<p>では、Lob開発をするにあたっては、様々な入力検証（たとえば必須入力や型桁検証）を実行したい状況もあれば、その検証を適用するタイミングもロストフォーカスではなく、任意のタイミングで実行したいなどの要件も発生します。</p>

<p>これらの要件についても、今まで得たバインディングの知識を組み合わせることで、柔軟に対応できます。</p>

<p>UpdateSourceTrigger.Explicit という設定があります。
現在はロストフォーカス時にデータをViewModelへ転送する設定ですが、Explicit では開発者が明示的にデータ転送用のメソッドを呼び出すタイミングでそれが行われます。</p>

<p>では、さっそくコーディングしましょう！</p>

<pre><code>&lt;TextBox Text="{Binding Path=SampleDate, UpdateSourceTrigger=Explicit, StringFormat=yyyy年MM月dd日}" /&gt;
</code></pre>

<p>これだけで、ロストフォーカスでValidationRuleが適用されることはなくなりました。</p>

<p><img src="http://s-ueno.github.io/images/wpf-03-13.png" alt="wpf-03-13" /></p>

<p>基本ですが、バインディングの肝要です。</p>

<p>ルールを新しく追加することなどもっと簡単で、<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.validationrule.aspx">ValidationRule</a> クラスを派生して値を検証するロジックを記述し、それを利用する開発者に提供するだけです。</p>

<p>では、必須入力ルールを作成してみましょう。</p>

<pre><code>    public class RequiredRule : ValidationRule
    {
        public object ErrorContent
        {
            get { return errorContent; }
            set { errorContent = value; }
        }
        private object errorContent = "Required fields.";

        public override ValidationResult Validate(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
                return new ValidationResult(false, ErrorContent);
            if (value is string &amp;&amp; string.IsNullOrEmpty(value as string))
                return new ValidationResult(false, ErrorContent);
            return new ValidationResult(true, null);
        }
    }
</code></pre>

<p>これを Binding.ValidationRules プロパティに Add する作業が必要ですが、それはどうとでもなります。<br/>
気にするとすれば、開発者が簡単かつ柔軟にValidationRule プロパティを拡張して適用できるように気を使うことです。</p>

<p>余談ですが、こういうライブラリを設計するアプローチもいろいろあり、楽しいものです。</p>

<p>『桁や必須かどうかというものは、データの属性である』というアプローチであったり、これを利用する開発イメージを処理と捉えてそこからスタートする方法もあります。</p>

<p>設計するアプローチは様々あり、それを選択していることを受け入れるいうことは重要です。<br/>
与太話でしたが、まとめるとこんなイメージで！</p>

<p><img src="http://s-ueno.github.io/images/wpf-03-14.png" alt="wpf-03-14" /></p>

<p>開発者は、バインドしているデータの書式および必須ルールを属性として利用できるようなイメージです。
このライブラリを開発する際に気にすることがあるとすれば、ルールは開発者が容易に拡張できるようなソリューションだと思います。</p>

<p>ところで、上述の RequiredRule ではデータ単体に着目したのですが、相関的な検証ルールはどうでしょうか。</p>

<p><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.validationrule.aspx">ValidationRule</a> クラスをMSDNで確認すると、すでにいくつかの派生クラスが規定で用意されています。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.exceptionvalidationrule.aspx">ExceptionValidationRule</a> クラス

<ul>
<li>既定で適用されていることを確認しました。</li>
</ul>
</li>
<li><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.dataerrorvalidationrule.aspx">DataErrorValidationRule</a> クラス</li>
<li><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.notifydataerrorvalidationrule.aspx">NotifyDataErrorValidationRule</a> クラス</li>
</ul>


<p>これらは<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.validationrules.aspx">ValidationRules</a> プロパティに追加せずとも、自動で有効になるようなオプションが Binding クラスに用意されています。</p>

<pre><code>&lt;TextBox Text="{Binding Path=SampleDate, ValidatesOnDataErrors=True}"/&gt;
&lt;TextBox Text="{Binding Path=SampleDate, ValidatesOnExceptions=True}"/&gt;
&lt;TextBox Text="{Binding Path=SampleDate, ValidatesOnNotifyDataErrors=True}"/&gt;
</code></pre>

<p>多くは規定で適用されており、これらを明示的に意識する必要はありません。</p>

<p>また、<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.notifydataerrorvalidationrule.aspx">NotifyDataErrorValidationRule</a> クラスは<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.dataerrorvalidationrule.aspx">DataErrorValidationRule</a> クラスの上位機能になります。<br/>
（NotifyDataErrorValidationRule は .Net Framework4.5 で提供されました。）</p>

<p>話を戻すと、この用意されているルールを利用して相関的な検証ロジックを実装する方法について紹介します。</p>

<p>この機能はView（ターゲット）からViewModel（データソース）へと値を転送した後にその値を保持するクラスが
<a href="http://msdn.microsoft.com/ja-jp/library/system.componentmodel.inotifydataerrorinfo.aspx">INotifyDataErrorInfo</a> インターフェイスを実装していれば、自動で有効になる機能です。</p>

<p>今のサンプルを例にしてみると、 ViewModel の SampleDate プロパティを TextBox.Text プロパティにバインドしています。
TextBoxに値を入力しそれが例外なくSampleDateに転送できた場合に、ViewModelが<a href="http://msdn.microsoft.com/ja-jp/library/system.componentmodel.inotifydataerrorinfo.aspx">INotifyDataErrorInfo</a> インターフェイスを実装していれば、自動で検証メソッドが実行されます。</p>

<p>この仕組みによって ViewModel上で、複数のプロパティを比較しながら、データの妥当性検証が可能になります。<br/>
これはビジネス エンティティのカプセル化を支援します。</p>

<p>どういうことかといえば、ある業務機能を実装するクラスがあったとします。<br/>
それは Entity Framework を利用したPOCOクラスかもしれないし、型付きDataSetかもしれないし、もしくは業務専用クラスかもしれません。</p>

<p>それらの属性をバインドしているならば、そのクラスが<a href="http://msdn.microsoft.com/ja-jp/library/system.componentmodel.inotifydataerrorinfo.aspx">INotifyDataErrorInfo</a> インターフェイスを実装することで、そのクラスに閉じた形で検証処理を実装することができます。
このインターフェイスは標準で参照している .Net Framework の System.dll が提供するので、WPFなどのプレゼンテーション テクノロジーとは切り離されています。</p>

<p>MSが提供する <a href="http://www.microsoft.com/ja-jp/dev/2010/solutions/architecture/default.aspx">Application Architecture Guide 2.0</a> では一般的な開発レイヤとして以下の図で説明しています。</p>

<p><img src="http://s-ueno.github.io/images/wpf-03-15.png" alt="wpf-03-15" /></p>

<p>ビジネスレイヤーでビジネスエンティティに検証ロジックをカプセル化し、それが自動でプレゼンテーション レイヤで有効化できるようなソリューションです。</p>

<p>ここまでで、単項目の検証ルールおよび複数項目の検証ルールが定義できるようになりました。</p>

<ul>
<li>検証ルールの定義</li>
<li>検証結果の視覚的フィードバック</li>
<li>検証を実行するタイミング</li>
</ul>


<p>あとは『検証結果の視覚的フィードバック』ですが、これはWPFテクノロジーのもう一つの肝要であるテンプレートを紹介する際にしたいと思います。
今は既定の視覚的フィードバックをそのまま利用しましょう。</p>

<h2><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.converter.aspx">Converter</a></h2>

<p>さて、最後に<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.binding.converter.aspx">Converter</a> プロパティについて紹介します。</p>

<p>これは StringFormat プロパティと比べ、よりリッチな変換を適用できます。</p>

<p>例えば、ViewModel上のプロパティ値が列挙体(None,Error,Complete)だった場合に、その列挙体にあったイメージ画像を返すみたいなグル（接着剤）コードをConverterクラスにカプセル化できます。</p>

<p>MSDNのサンプルコードでは</p>

<pre><code>    [ValueConversion(typeof(DateTime), typeof(String))]
    public class DateConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
</code></pre>

<p>という風にIValueConverterインターフェイスの実装と合わせて、ValueConversion属性も付与しています。<br/>
これは自分が作業する分だけなのであれば特に不要なのですが、共通ライブラリなどを作成した際に、それを利用する開発者に対してのメッセージになります。</p>

<p>WPFは自由度が高い反面、ルールがないと意図しない結果になる可能性があります。
たとえばですが、開発者はXaml上でコンボボックスを正しくコーディングしていたとしても、テンプレートというスタイルを書き換える機能が適用された場合は、それがラジオボタンに差し替わって表示されることなど容易に可能です。</p>

<p><a href="http://msdn.microsoft.com/ja-jp/library/ms752339.aspx">MSDNのこの記事</a>など読むと面白いのですが</p>

<blockquote><p>このベスト プラクティスは、組み込みの WPF コントロール セット用のテーマ コントロール スタイルでの作業の際に、多くの試行錯誤を通じて得られたものです。</p></blockquote>

<p>マイクロソフト内部でもいろいろと苦労したことが伺えます。</p>

<p>例として<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.combobox.aspx">ComboBox</a>クラスを見ると様々な属性を持っていますが、この情報は後に柔軟なスタイルおよびデザイン（機能性）を実現する上でとても重要なものとなります。</p>

<pre><code>[Localizability(LocalizationCategory.ComboBox)]
[TemplatePart(Name = "PART_EditableTextBox", Type = typeof(TextBox))]
[TemplatePart(Name = "PART_Popup", Type = typeof(Popup))]
[StyleTypedProperty(Property = "ItemContainerStyle", StyleTargetType = typeof(ComboBoxItem))]
public class ComboBox : Selector

/*
今はWPFの基本を解決している最中でが、応用してテンプレートを利用する世界では、
技術資産を蓄積できるようになります。

その際にはコンボボックスをカスタマイズしたスタイルの適用や、
添付プロパティによるカスタマイズなどを紹介したいと思います。
*/
</code></pre>

<p>ライブラリとしてIValueConverterを提供する場合は、開発者へのメッセージとしてValueConversion属性をつけてね、ということなのですが・・・</p>

<p>確かに、Xaml上でIValueConverterを適用するためには日付用とか●×用とか何個も専用のクラスを作成する必要があります。</p>

<pre><code>        &lt;StackPanel Grid.Row="0" Grid.Column="1" Orientation="Horizontal" Margin="5" &gt;
            &lt;StackPanel.Resources&gt;
                &lt;local:DateConverter x:Key="dateConverter"/&gt;
            &lt;/StackPanel.Resources&gt;
            &lt;TextBox Name="ConverterTextBox" Text="{Binding Path=SampleDate, Converter={StaticResource dateConverter}, ConverterParameter=arg}"/&gt;
        &lt;/StackPanel&gt;
</code></pre>

<p>ただ、<a href="https://www.google.com/search?q=Expression+Builder%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">Expression Builder</a>パターンでコードビハインド上でのコーディングを採用するとしたら、以下で多くは解決できます。</p>

<pre><code>
    public class SimpleConverter : IValueConverter
    {
        public Func&lt;object, Type, object, CultureInfo, object&gt; ConvertMethod { get; set; }
        public Func&lt;object, Type, object, CultureInfo, object&gt; ConvertBackMethod { get; set; }
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (ConvertMethod != null)
                return ConvertMethod(value, targetType, parameter, culture);
            throw new NotImplementedException();
        }
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (ConvertBackMethod != null)
                return ConvertBackMethod(value, targetType, parameter, culture);
            throw new NotImplementedException();
        }
    }
</code></pre>

<p>WPFテクノロジー依存であり、Viewのコードビハインド上に静的メソッドを用意すればかなりシンプルになります。</p>

<p>IValueConverter としてはシステムで共通的なロジックの部品化という視点で拡張すればと思います。
ただ、多くはアドホックで業務（≒画面）固有なので、上記のようなメソッド指定が活躍することは多いです。</p>

<p>以上で、バインディングの基本でありながら、WPFの肝要となる機能の紹介でした。</p>

<p>これらの動作を確認するためのサンプルは<a href="http://s-ueno.github.io/additionalData/uEN-Vol03.zip">コチラ</a></p>

<hr />
]]></content>
  </entry>
  
</feed>
