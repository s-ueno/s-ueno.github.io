<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: wpf | uEN Laboratory]]></title>
  <link href="http://s-ueno.github.io/blog/categories/wpf/atom.xml" rel="self"/>
  <link href="http://s-ueno.github.io/"/>
  <updated>2014-12-04T12:47:47+09:00</updated>
  <id>http://s-ueno.github.io/</id>
  <author>
    <name><![CDATA[uEN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Modern Style TextBox]]></title>
    <link href="http://s-ueno.github.io/blog/2014/12/02/wpf-14/"/>
    <updated>2014-12-02T22:10:27+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/12/02/wpf-14</id>
    <content type="html"><![CDATA[<p>TextBox の Style を Modern Style 対応します。</p>

<!-- more -->


<p>まずは土台を取得したいので、VisualStudio のデザイナ上で TextBox を右クリック
 ⇒ テンプレートの編集 ⇒ コピーして編集で生成されるテンプレートを利用したいと思います。</p>

<p><img src="http://s-ueno.github.io/images/wpf-14-01.png" alt="wpf-14-01" /></p>

<p>ちなみに、現在適用されているデフォルトのテーマで出力されるので、Windows 7 と 8 では違った値がでると思います。
で、8で出力されたのがコレ</p>

<pre><code>        &lt;SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/&gt;
        &lt;SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/&gt;
        &lt;SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/&gt;
        &lt;Style x:Key="TextBoxStyle1" TargetType="{x:Type TextBox}"&gt;
            &lt;Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/&gt;
            &lt;Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/&gt;
            &lt;Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/&gt;
            &lt;Setter Property="BorderThickness" Value="1"/&gt;
            &lt;Setter Property="KeyboardNavigation.TabNavigation" Value="None"/&gt;
            &lt;Setter Property="HorizontalContentAlignment" Value="Left"/&gt;
            &lt;Setter Property="FocusVisualStyle" Value="{x:Null}"/&gt;
            &lt;Setter Property="AllowDrop" Value="true"/&gt;
            &lt;Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/&gt;
            &lt;Setter Property="Stylus.IsFlicksEnabled" Value="False"/&gt;
            &lt;Setter Property="Template"&gt;
                &lt;Setter.Value&gt;
                    &lt;ControlTemplate TargetType="{x:Type TextBox}"&gt;
                        &lt;Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"&gt;
                            &lt;ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/&gt;
                        &lt;/Border&gt;
                        &lt;ControlTemplate.Triggers&gt;
                            &lt;Trigger Property="IsEnabled" Value="false"&gt;
                                &lt;Setter Property="Opacity" TargetName="border" Value="0.56"/&gt;
                            &lt;/Trigger&gt;
                            &lt;Trigger Property="IsMouseOver" Value="true"&gt;
                                &lt;Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/&gt;
                            &lt;/Trigger&gt;
                            &lt;Trigger Property="IsKeyboardFocused" Value="true"&gt;
                                &lt;Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/&gt;
                            &lt;/Trigger&gt;
                        &lt;/ControlTemplate.Triggers&gt;
                    &lt;/ControlTemplate&gt;
                &lt;/Setter.Value&gt;
            &lt;/Setter&gt;
            &lt;Style.Triggers&gt;
                &lt;MultiTrigger&gt;
                    &lt;MultiTrigger.Conditions&gt;
                        &lt;Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/&gt;
                        &lt;Condition Property="IsSelectionActive" Value="false"/&gt;
                    &lt;/MultiTrigger.Conditions&gt;
                    &lt;Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/&gt;
                &lt;/MultiTrigger&gt;
            &lt;/Style.Triggers&gt;
        &lt;/Style&gt;
</code></pre>

<p>訂正</p>

<p>よくみると、IsInactiveSelectionHighlightEnabledなので、フォーカスが外れた際のアクティブでない選択した項目の背景　でした・・・。
VisualStudio先生、すみませんでした。</p>

<p><del>
VS2013 Update 4 ですが、自動生成した MultiTrigger の Condition の設定値が実は逆というバグは愛嬌ということで(ニコッ)
</del></p>

<p>まず、シンプルなのが一目でわかります。<br/>
Triggerも非活性時には不透明度を設定することでそれっぽく見せるなど、小粋です。
リソースのキーが <code>x:Key="TextBox.MouseOver.Border"</code> とか <code>x:Key="TextBox.Focus.Border"</code> など、.で区切るところが
個人的にとても気に入りました。</p>

<p>ちなみに、ほとんど変える箇所はなく、現在 Background や Foreground が静的参照なので、これを
アプリケーションで統一的なキーに DynamicResource で置き換えるだけです。</p>

<p>WPFの組み込みコントロールで、特にLOB開発に利用するコントロールなどは限られているので、
こんな感じで、技術資産をためていくと、後の開発で楽にガバナンスを効かせられます。</p>

<p><img src="http://s-ueno.github.io/images/wpf-14-02.png" alt="wpf-14-02" /></p>

<p>で、作成したのがコレ。</p>

<pre><code>
    &lt;Style TargetType="{x:Type TextBox}"&gt;
        &lt;Setter Property="Background"       Value="{DynamicResource TextBox.Background}"/&gt;
        &lt;Setter Property="BorderBrush"      Value="{DynamicResource TextBox.BorderBrush}"/&gt;
        &lt;Setter Property="Foreground"       Value="{DynamicResource AppForeground}"/&gt;
        &lt;Setter Property="BorderThickness"  Value="1"/&gt;

        &lt;Setter Property="KeyboardNavigation.TabNavigation" Value="None"/&gt;
        &lt;Setter Property="HorizontalContentAlignment"       Value="Left"/&gt;
        &lt;Setter Property="FocusVisualStyle"                 Value="{x:Null}"/&gt;
        &lt;Setter Property="AllowDrop"                        Value="true"/&gt;
        &lt;Setter Property="ScrollViewer.PanningMode"         Value="VerticalFirst"/&gt;
        &lt;Setter Property="Stylus.IsFlicksEnabled"           Value="False"/&gt;
        &lt;Setter Property="Template"&gt;
            &lt;Setter.Value&gt;
                &lt;ControlTemplate TargetType="{x:Type TextBox}"&gt;
                    &lt;Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"&gt;
                        &lt;ScrollViewer x:Name="PART_ContentHost" Focusable="false" 
                                      HorizontalScrollBarVisibility="Hidden" 
                                      VerticalScrollBarVisibility="Hidden"/&gt;
                    &lt;/Border&gt;
                    &lt;ControlTemplate.Triggers&gt;
                        &lt;Trigger Property="IsEnabled" Value="false"&gt;
                            &lt;Setter Property="Opacity" TargetName="border" Value="0.56"/&gt;
                        &lt;/Trigger&gt;
                        &lt;Trigger Property="IsMouseOver" Value="true"&gt;
                            &lt;Setter Property="Background" TargetName="border" Value="{DynamicResource TextBox.MouseOver.Background}"/&gt;
                        &lt;/Trigger&gt;
                        &lt;Trigger Property="IsKeyboardFocused" Value="true"&gt;
                            &lt;Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextBox.Focus.Border}"/&gt;
                        &lt;/Trigger&gt;
                    &lt;/ControlTemplate.Triggers&gt;
                &lt;/ControlTemplate&gt;
            &lt;/Setter.Value&gt;
        &lt;/Setter&gt;
        &lt;Style.Triggers&gt;
            &lt;MultiTrigger&gt;
                &lt;MultiTrigger.Conditions&gt;
                    &lt;Condition Property="IsSelectionActive" Value="true"/&gt;
                &lt;/MultiTrigger.Conditions&gt;
                &lt;Setter Property="SelectionBrush" Value="{DynamicResource TextBox.SelectionBrush}"/&gt;
            &lt;/MultiTrigger&gt;
            &lt;MultiTrigger&gt;
                &lt;MultiTrigger.Conditions&gt;
                    &lt;Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/&gt;
                    &lt;Condition Property="IsSelectionActive" Value="false"/&gt;
                &lt;/MultiTrigger.Conditions&gt;
                &lt;Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/&gt;
            &lt;/MultiTrigger&gt;
        &lt;/Style.Triggers&gt;
    &lt;/Style&gt;
</code></pre>

<p>TextBoxまで作成すると、背景色を白ベースか黒ベースかという選択肢も追加できます。</p>

<p>テキストボックスの選択している箇所がブランドカラーになるのも美しいです。</p>

<p><img src="http://s-ueno.github.io/images/wpf-14-03.png" alt="wpf-14-03" /></p>

<p>TextBoxなどはまだ簡単なのですが、ラジオボタン、コンボボックスとなるにつれて、VisualStudioが自動生成してくれる
テンプレートが挑発的です。</p>

<p>次回は、ラジオボタンを紹介します。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WPF パンくずリストで画面遷移]]></title>
    <link href="http://s-ueno.github.io/blog/2014/11/29/wpf-13/"/>
    <updated>2014-11-29T02:35:15+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/11/29/wpf-13</id>
    <content type="html"><![CDATA[<p>ナビゲーターとしてのインターフェイス + Styleによるパンくずリストの外観を
併せ持つパンくずリストクラスです。</p>

<p><img src="http://s-ueno.github.io/images/wpf-13-01.png" alt="wpf-13-01" /></p>

<!-- more -->


<p>ベースクラスを <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemscontrol.aspx">ItemsControl</a> とするカスタム コントロールとして作成しました。<br/>
上部にメニューを配置し、中央部がメインコンテンツという最もシンプルなパターンです。</p>

<p>いつものごとく、Styleを利用して グリッド レイアウトで区切っていきます。</p>

<p><img src="http://s-ueno.github.io/images/wpf-13-02.png" alt="wpf-13-02" /></p>

<p>ここで、メインコンテンツと右上部のアイコンは増減しませんが、左上部のパンくずメニューは遷移によって
コンテンツが増減する、 <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemscontrol.aspx">ItemsControl</a> の実体の部分になります。</p>

<p>この実態部のコンテンツを表すのが <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemspresenter.aspx">ItemsPresenter</a> クラスです。</p>

<p>ItemsControl.Items プロパティにButtonを10個投入した場合、この <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemspresenter.aspx">ItemsPresenter</a> の箇所にButtonが10個表示されます。</p>

<p>ちなみに ItemsControl の実体が ItemsPresenter であり、
ContentControl の実体は ContentPresenter という、シンプルな名前です。</p>

<p>次に Item をどのようなパネルに展開するのかを決定するのが、 ItemsControl.ItemsPanel プロパティです。</p>

<p>メニューなので横に展開することができる <code>&lt;WrapPanel Orientation="Horizontal" /&gt;</code> を指定することで、要件を満たせます。</p>

<p>あとは右上に アイコンボタン(Designed by <a href="http://modernuiicons.com/">Alex Peattie</a> )
中央に ViewModel を指定するとそのViewを表示することができるカスタムの DataTemplateSelector
を指定した ContentPresenter を配置すると カスタム コントロールとしての外観は完成です。</p>

<p>60行程度のとてもシンプルな定義です。</p>

<p>&#8220;`
&lt;ui:ViewDataTemplateSelector x:Key=&ldquo;templateSelector&rdquo; /></p>



<p>&#8220;`</p>

<p>ナビゲーターとしてのインターフェイス　+　いつものごとくアニメーションをC#のコード上で実装すれば完成です。</p>

<p>ポイントがいくつかあるので紹介します。</p>

<ul>
<li>MEFの利用</li>
<li>アニメーション</li>
<li>NewWindowボタン</li>
<li><a href="http://msdn.microsoft.com/ja-jp/library/system.weakreference.aspx">WeakReference</a>の利用</li>
</ul>


<h2>MEFの利用</h2>

<p>Use添付プロパティを公開し、trueが設定されると自分自身をMEF経由でインスタンス化するようにしています。</p>

<p><img src="http://s-ueno.github.io/images/wpf-13-03.png" alt="wpf-13-03" /></p>

<p>設定側</p>

<p><img src="http://s-ueno.github.io/images/wpf-13-04.png" alt="wpf-13-04" /></p>

<h2>アニメーション</h2>

<p>パンくずメニューに新しくアイテムが追加されると、画面右側からButtonが飛んでくるアニメーションです。
これもシンプルで ItemsControl.Items プロパティ に Button を Add するタイミングで、 Storyboard を適用すればOKです。</p>

<h2>NewWindowボタン</h2>

<p>LOBアプリでは画面を見比べることもあるだろうと、NewWindowボタンを用意しました。
ボタン押下で表示しているメインコンテンツが新しいWindowsとして起動する機能です。</p>

<p><img src="http://s-ueno.github.io/images/wpf-13-05.png" alt="wpf-13-05" /></p>

<p>今は単純に新しいWindow表示していますが、どこかのタイミングでガバーフローとして
画面をスタックし、アニメーション表示する機能に差し替えたいと思います。</p>

<h2><a href="http://msdn.microsoft.com/ja-jp/library/system.weakreference.aspx">WeakReference</a>の利用</h2>

<p>最後に、<a href="http://msdn.microsoft.com/ja-jp/library/system.weakreference.aspx">WeakReference</a>についてです。</p>

<p>過去に紹介しましたが、親ViewModel が 子ViewModel を New し、それを ListCollectionView 経由で Tab 風に表示させたりしています。
ライフサイクル管理の基本は、Newした人が破棄まで担当するので、この場合は 親ViewModel が子ViewModelの破棄までを担当します。</p>

<p>このときに、ナビゲーターが直接子ViewModelのインスタンスへの参照を持ってしまうと、
メモリに残り続けてガベージコレクタの対象にならないようなことも十分に起こりえます。</p>

<p>ナビゲーターは指示されればViewModelを参照して遷移しますが、その参照は&#8221;弱い参照&#8221;である必要があります。
そこで利用するのが、<a href="http://msdn.microsoft.com/ja-jp/library/system.weakreference.aspx">WeakReference</a>です。</p>

<p>このクラス経由で参照する場合、ガベージコレクタは参照にカウントしないので、不要なメモリリークを防ぐことができます。</p>

<p>あと、いくつかの基本的な機能（TextBox、DataGrid、ToggleButton系）のModern Style化と拡張を紹介できれば、アプリケーション作成に入りたいと思います。</p>

<p>サンプルはコチラ
<a href="https://github.com/s-ueno/uENLab" rel="tooltip" title="uENLab">
  <img class="social_icon" alt="github icon" src="http://s-ueno.github.io/images/glyphicons_381_github.png">
</a></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ダイアログ メッセージのデザイン - WPF Vol 09]]></title>
    <link href="http://s-ueno.github.io/blog/2014/11/20/wpf-10/"/>
    <updated>2014-11-20T20:28:15+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/11/20/wpf-10</id>
    <content type="html"><![CDATA[<p>ストア アプリ風のダイアログ メッセージ を作成しました。<br/>
もちろん、アニメーションします。</p>

<p><img src="http://s-ueno.github.io/images/wpf-10-01.png" alt="wpf-10-01" /></p>

<!-- more -->


<p>これも、いつもの如くまずはグリッド デザインから始まります。</p>

<p><img src="http://s-ueno.github.io/images/wpf-10-02.png" alt="wpf-10-02" /></p>

<p>ちなみに図（と、デザイン）は<a href="http://msdn.microsoft.com/ja-jp/jj984295">ココ</a>です。<br/>
(XPS で配布しなさいよ!!@心の声)</p>

<p>Windows 8.1 UX ガイドライン というのが、どこかにあると思います。</p>

<p>さて、話を戻すとWindowのデフォルトStyle上で、グリッドを比率設定してデザインしました。</p>

<p><img src="http://s-ueno.github.io/images/wpf-10-03.png" alt="wpf-10-03" /></p>

<pre><code>&lt;Grid.RowDefinitions&gt;
    &lt;RowDefinition Height="2*" /&gt;
    &lt;RowDefinition Height="auto" /&gt;
    &lt;RowDefinition Height="2*" /&gt;
&lt;/Grid.RowDefinitions&gt;
</code></pre>

<p>作業手順ですが、今回のように具体的な図を基にする場合は、Excelにイメージを張り付けた後にセルの数を数えて、6個、3個、6個で比率だと 2対1対2 だね、という大雑把に設定しています。</p>

<p>次に、真ん中のメッセージタイトル、メッセージ内容、ボタンを大まかに区切っていきます。</p>

<pre><code>&lt;Grid.ColumnDefinitions&gt;
    &lt;ColumnDefinition Width="*" /&gt;
    &lt;ColumnDefinition Width="3*" /&gt;
    &lt;ColumnDefinition Width="*" /&gt;
&lt;/Grid.ColumnDefinitions&gt;
</code></pre>

<p>あとは、このVisibilityをVisibleにすると同時にアニメーションすれば完成です。
ちなみにこれを呼び出す側はViewModelに用意した拡張メソッドをCallするだけです。</p>

<p><img src="http://s-ueno.github.io/images/wpf-10-04.png" alt="wpf-10-04" /></p>

<p>今回のポイントは<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.input.keyboardnavigation.aspx">KeyboardNavigation</a> クラスを利用した各種添付プロパティです。</p>

<p><img src="http://s-ueno.github.io/images/wpf-10-05.png" alt="wpf-10-05" /></p>

<p>メッセージ ダイアログなので、デフォルトでフォーカスがあたるボタンがあります。<br/>
この時にボタン以外にフォーカスが当たると困ります。</p>

<p>MSDNを見ると</p>

<blockquote><p>KeyboardNavigation  クラスは、ナビゲーション キーのいずれかが押されたときに、既定のキーボード フォーカスのナビゲーションを実装します。 ナビゲーション キーとは、Tab、Shift + Tab、Ctrl + Tab、Ctrl + Shift + Tab、上方向、下方向、左方向、および右方向の各キーを指します。</p></blockquote>

<p>とあります。</p>

<p>これらのキーを押してもボタン群だけフォーカスが当たるように添付プロパティを設定しています。</p>

<p>いつものごとく、サンプル成果物はGit管理で。</p>

<p><a href="https://github.com/s-ueno/uENLab">@s-ueno/uENLab</a> on GitHub</p>

<p>次回は画面遷移を考えてみます。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[カスタムコントロールとおまけでIsolatedStorage - WPF Vol 08]]></title>
    <link href="http://s-ueno.github.io/blog/2014/11/20/wpf-09/"/>
    <updated>2014-11-20T02:02:02+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/11/20/wpf-09</id>
    <content type="html"><![CDATA[<p>カスタム コントロールを作成して TabControlと置き換えてみました。</p>

<p><img src="http://s-ueno.github.io/images/wpf-09-01.png" alt="wpf-09-01" /></p>

<!-- more -->


<p>前回はユーザーコントロールでしたが、今度はカスタムコントロールです。</p>

<p>VisualStudioで新しい項目の追加を選択すると</p>

<p><img src="http://s-ueno.github.io/images/wpf-09-02.png" alt="wpf-09-02" /></p>

<p>ユーザーコントロールとは別にカスタムコントロールが選べます。</p>

<p>ユーザーコントロールでは、Xamlファイル+コードビハインドが追加されました。
カスタムコントロールでは、csファイルがメインで、そのStyleリソースがプロジェクト直下にThemesフォルダとGeneric.xamlという形で追加されます。</p>

<p>TabControlの代わりにListContentカスタムコントロールを作成します。<br/>
追加されたGeneric.xamlはListContent.Xamlに名前を変更しました。</p>

<p><img src="http://s-ueno.github.io/images/wpf-09-03.png" alt="wpf-09-03" /></p>

<p>csファイルの中身は、静的コンストラクタとデフォルトスタイル キーの宣言、長いコメントが付いてきます。</p>

<p><img src="http://s-ueno.github.io/images/wpf-09-04.png" alt="wpf-09-04" /></p>

<p>ベースクラスはControlクラスから<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.primitives.selector.aspx">Selector</a> クラスに変更しました。</p>

<p>Controlクラスから複数のアイテムを操作するための一連の機能を実装しているItemsControl、さらにそこに選択するという一連の依存関係プロパティを実装しているSelectorクラスを、今回のベースクラスとして採用しています。</p>

<p>Tabコントロールと同等レベルでよければ、このcsファイルは何も実装しなくても問題ありません。
追加されたリソースディクショナリにXamlでStyleとTemplateを実装していくと、それだけで問題なく動作できます。</p>

<p>ちなみに、これを利用するアプリケーション側は1行、TabControlからListContentに書き換えるだけです。</p>

<p><img src="http://s-ueno.github.io/images/wpf-09-05.png" alt="wpf-09-05" /></p>

<p>あとは、デザインをイメージしてXamlのスタイルを記述していきます。<br/>
今回は上部に各タブのタイトルが並び、それを選択するとメインコンテンツに対象のViewが表示される形です。</p>

<pre><code>    &lt;ui:ViewDataTemplateSelector x:Key="templateSelector" /&gt;
    &lt;Style TargetType="{x:Type local:ListContent}"&gt;
        &lt;Setter Property="Focusable" Value="False" /&gt;
        &lt;Setter Property="FocusVisualStyle" Value="{x:Null}"/&gt;
        &lt;Setter Property="KeyboardNavigation.TabNavigation" Value="Local" /&gt;
        &lt;Setter Property="Template"&gt;
            &lt;Setter.Value&gt;
                &lt;ControlTemplate TargetType="{x:Type local:ListContent}"&gt;
                    &lt;Grid&gt;
                        &lt;Grid.RowDefinitions&gt;
                            &lt;RowDefinition Height="auto" /&gt;
                            &lt;RowDefinition Height="*" /&gt;
                        &lt;/Grid.RowDefinitions&gt;
                        &lt;ListBox x:Name="TitleContent" 
                                 Background="Transparent"
                                 HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 ItemsSource="{TemplateBinding ItemsSource}"
                                 ItemContainerStyle="{StaticResource ListContentHeaderStyle}"
                                 &gt;
                            &lt;ListBox.ItemsPanel&gt;
                                &lt;ItemsPanelTemplate&gt;
                                    &lt;WrapPanel Orientation="Horizontal"/&gt;
                                &lt;/ItemsPanelTemplate&gt;
                            &lt;/ListBox.ItemsPanel&gt;
                        &lt;/ListBox&gt;
                        &lt;ContentPresenter x:Name="MainContent" Grid.Row="1" 
                                          Content="{TemplateBinding SelectedItem}"
                                          ContentTemplateSelector="{StaticResource templateSelector}" /&gt;
                    &lt;/Grid&gt;
                &lt;/ControlTemplate&gt;
            &lt;/Setter.Value&gt;
        &lt;/Setter&gt;
    &lt;/Style&gt;
</code></pre>

<p>ポイントがいくつかあります。</p>

<ul>
<li><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.input.keyboardnavigation.tabnavigation.aspx">KeyboardNavigation.TabNavigation</a> 添付プロパティ</li>
<li>ListBox</li>
<li>ContentPresenter</li>
</ul>


<h2><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.input.keyboardnavigation.tabnavigation.aspx">KeyboardNavigation.TabNavigation</a> 添付プロパティ</h2>

<p>WPFはツリー構造なのでTabを押下していくと最初にトップレベルのコンテンツにタブが移動してきます。そこで、この添付プロパティ値をLocal設定すると、Tabで今回作成したListContentにフォーカスが入った際に、次のコンテンツではなく、ListContent内部へTabが移動するようになります。</p>

<h2>ListBox / <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemscontrol.itemcontainerstyle.aspx">ListBox.ItemContainerStyle</a></h2>

<p>今回は上部にヘッダー用のメニューをデザインしています。
ListContentはベースクラスにItemsControlを持つので、そこにバインドされたコレクションの一覧を持ちます。</p>

<p>その一覧をListBoxのItemsSourceにTemplateBindingで転送しています。
ListBoxなので、各行のスタイルを自由にデザインできます。
このスタイルが、上部のメニューのスタイルになります。そのStyleを決定するのが<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemscontrol.itemcontainerstyle.aspx">ListBox.ItemContainerStyle</a>プロパティです。</p>

<pre><code>&lt;ListBox.ItemContainerStyle&gt;
    &lt;Style TargetType="{x:Type ListBoxItem}"&gt;
</code></pre>

<p>として直接記述することもできますし、<code>&lt;Style  x:Key="ListContentHeaderStyle" TargetType="{x:Type ListBoxItem}"&gt;</code> として別の箇所に記述したものを利用することもできます。</p>

<p>今回は整理するためにも後述の別箇所に切り出しました。</p>

<p>そのStyleも淡々とデザインします。
アイコンを設定できる枠を用意してもいいし、選択されているときだけ背景色を設定するとかでもいいかもしれません。</p>

<h2>ContentPresenter</h2>

<p>Contentには選択してるアイテムをTemplateBindingで転送しています。<br/>
その実態はバインド ソースである <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.data.listcollectionview.aspx">ListCollectionView</a> 経由でViewModelコレクションの中の選択されている一つです。</p>

<p>ContentTemplateSelectorプロパティを利用することで、コンテンツをどう表示させるかを選択させています。</p>

<p>この仕組みだけで表示はできるのですが、コンテンツの細かい一つ一つをどう表示するかを作りこむことで、ユーザーに体感してもらうことができます。</p>

<p>今回はメニューの一つ一つが滑らかなアニメーションで表示されるように作りこみました。<br/>
些細なことですが、シンプルでも退屈させず、それがコンテンツであることを認識してもらうことができます。</p>

<p>今回はアニメーションの作りこみのために、ListContent.csファイルにコードを追加しています。
アニメーションは<a href="http://msdn.microsoft.com/ja-jp/library/ms742868.aspx">Storyboard</a> クラス、<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.media.animation.animationtimeline.aspx#inheritanceContinued">AnimationTimeline</a> クラスと利用するのですが、滑らかにするためのコツとして<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.media.animation.easingfunctionbase.aspx#inheritanceContinued">イージング関数</a>があります。</p>

<p>機械的な動作ではなく、慣性的なアニメーションで滑らかな印象を与えることができます。</p>

<p>XAMLは技術依存ですが資産としてクラス ライブラリに集めていくと、利用するアプリケーション開発は自動でポリシーのように利用できるようになります。</p>

<p>いくつかの基本的な技術資産を実装した段階で、具体的なアプリケーションの作成を考えています。
その際にはラフでいい加減なユースケース シナリオを用いたお手軽分析しながら作成したいと思います。</p>

<p>代表的な残りは・・・</p>

<ul>
<li>ストアアプリ風メッセージボックス</li>
<li>画面遷移</li>
<li>例外専用ダイアログ</li>
<li>TextBox

<ul>
<li>Modern Style化</li>
<li>IMEの注入</li>
<li>型桁対応</li>
<li>AutoComplete</li>
</ul>
</li>
<li>DataGrid

<ul>
<li>Modern Style化</li>
</ul>
</li>
<li>ToggleButton系</li>
<li>ComboBox</li>
</ul>


<p>などでしょうか。</p>

<h2><a href="http://msdn.microsoft.com/ja-jp/library/system.io.isolatedstorage.aspx">IsolatedStorage</a></h2>

<p>おまけで、紹介します。</p>

<p>MSDNを見てもよくわかりませんが、簡単に言うとアプリケーション毎のセキュアな読書用Streamを与えてくれる機能です。Streamなので、具体的なファイルパスを意識する必要がないのが便利です。</p>

<p>また、実際に永続化してくれているので、アプリケーションの次回起動時にその情報を利用できます。</p>

<p>今回は拡張メソッドで用意しました。</p>

<pre><code>
    public static class BackingStore
    {
        public static void SetBackingStore&lt;T&gt;(this T obj, object value, [CallerMemberName] string key = null) where T : class
        {
            var appStore = IsolatedStorageFile.GetUserStoreForAssembly();
            var directoryPath = typeof(T).FullName;
            if (!appStore.DirectoryExists(directoryPath))
            {
                appStore.CreateDirectory(directoryPath);
            }

            using (var stream = new IsolatedStorageFileStream(Path.Combine(directoryPath, key), FileMode.OpenOrCreate, appStore))
            {
                var formatter = new BinaryFormatter();
                formatter.Serialize(stream, value);
            }
        }
        public static object GetBackingStore&lt;T&gt;(this T obj, [CallerMemberName] string key = null) where T : class
        {
            var appStore = IsolatedStorageFile.GetUserStoreForAssembly();
            var directoryPath = typeof(T).FullName;
            if (!appStore.DirectoryExists(directoryPath))
            {
                appStore.CreateDirectory(directoryPath);
            }

            object result = null;
            try
            {
                using (var stream = new IsolatedStorageFileStream(Path.Combine(directoryPath, key), FileMode.OpenOrCreate, appStore))
                {
                    var formatter = new BinaryFormatter();
                    result = formatter.Deserialize(stream);
                }
            }
            catch (Exception ex)
            {

            }
            return result;
        }

        public static void RemoveBackingStore&lt;T&gt;(this T obj) where T : class
        {
            var appStore = IsolatedStorageFile.GetUserStoreForAssembly();
            appStore.Remove();
        }

    }
</code></pre>

<p>プロパティのバッキングストアのように利用します。</p>

<pre><code>public int MyProperty
{
    get { return (int)this.GetBackingStore(); }
    set { this.SetBackingStore(value); }
}
</code></pre>

<p>ただ FileIOしますし、排他制御もしていないので、マルチスレッドはもちろん頻繁にアクセスするような機能でないことは確かです。</p>

<p>今回はSettingで選択した情報を保存・復元する機能を持ちます。
具体的な永続化の場所はユーザーのAppDataフォルダの中に保存されています。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ユーザーコントロールに学ぶ様々なコンテンツ - WPF Vol 07]]></title>
    <link href="http://s-ueno.github.io/blog/2014/11/17/wpf-08/"/>
    <updated>2014-11-17T19:44:57+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/11/17/wpf-08</id>
    <content type="html"><![CDATA[<p>設定メニューの作成を通じて、ユーザーコントロールについて紹介します。</p>

<p><img src="http://s-ueno.github.io/images/wpf-08-01.png" alt="wpf-08-01" /></p>

<!-- more -->


<p>WPFは柔軟で StyleやTemplate、添付プロパティで多くは対応できるのですが、場合によっては以下のようなレベルでコントロールを作成する場面も出てきます。</p>

<ul>
<li>ユーザーコントロール</li>
<li>カスタムコントロール</li>
<li>カスタム要素</li>
</ul>


<p><a href="http://msdn.microsoft.com/ja-jp/library/ms745025.aspx">MSDNにも記載</a>があります。</p>

<p>また、これらをクラス ライブラリとして開発する場合と、アプリケーションとして開発する場合で適用するプログラミング デザインパターンも変わってきます。</p>

<p>本シリーズのビューの基本クラスとなるBizViewクラスはUserControl派生です。
その基本機能を実装する上でMVVMパターンで作成しているかといえば、クラスライブラリとしての基本セットなのでそうではありません。</p>

<h2>ユーザーコントロール</h2>

<p>VisualStudioで、新しい項目を追加する場合に選択できます。<br/>
ベースクラスがUserControlクラスになります。</p>

<p>主な目的は、より要件に具体的なビューを提供済みのコンテンツを組み合わせて構築することです。<br/>
たとえば、BizViewクラスから派生したView/ViewModelの各種コンテンツ(サンプルのVol04View/Vol05Viewなど)も同様に、目的とする画面をボタンやラベルといった提供済みコンテンツを配置して作成しています。</p>

<p>それと比べて、カスタムコントロールやカスタム要素は、WPFの組込済みコントロール(Buttonのベースクラスは)がそうであるように、基本となるコンテンツ作成として利用します。</p>

<p>FrameworkElement派生ではパフォーマンスが向上しますが、実装する際には <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.media.drawingvisual.aspx">DrawingVisual</a> クラスなどを利用して、描画を実装する必要が出てきます。</p>

<p>さて、今回は画面の右側に表示する設定画面をユーザーコントロールで作成します。<br/>
画面は以下の構成で、コンテンツ部には指定したView/ViewModelのセットが追加できるよう検討します。</p>

<p><img src="http://s-ueno.github.io/images/wpf-08-03.png" alt="wpf-08-03" /></p>

<p>ユーザーコントロールなので、Xamlで画面を開発する要領で作成します。</p>

<p>Xamlも上から下まで30行程度です。</p>

<ul>
<li>グリッドをデザイン通りに上下分割</li>
<li>上部にタイトルとアイコン</li>
<li>下部に設定タイトル一覧とメインコンテンツ</li>
</ul>


<p>を配置しています。</p>

<pre><code>&lt;UserControl x:Class="uEN.UI.Controls.Settings"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:uen="clr-namespace:uEN.UI"
             mc:Ignorable="d" 
             Background="{DynamicResource AppBrand}"
             Foreground="White"
             BorderBrush="Transparent"
             d:DesignHeight="300" d:DesignWidth="300"&gt;
    &lt;UserControl.Resources&gt;
        &lt;uen:ViewDataTemplateSelector x:Key="templateSelector" /&gt;
    &lt;/UserControl.Resources&gt;
    &lt;Grid&gt;
        &lt;Grid.RowDefinitions&gt;
            &lt;RowDefinition Height="auto"/&gt;
            &lt;RowDefinition Height="*"/&gt;
        &lt;/Grid.RowDefinitions&gt;
        &lt;StackPanel Margin="10,30,0,30" Orientation="Horizontal"&gt;
            &lt;Button x:Name="IconButton" Width="35" Height="35" Margin="5" 
                    Foreground="White"
                    BorderBrush="White"
                    Style="{DynamicResource EllipseButtonStyle}" 
                    &gt;
                &lt;Viewbox Stretch="Fill"&gt;
                    &lt;Path Style="{DynamicResource PathButtonStyle}"
                          Data="F1 M 33.6458,38L 49.4792,53.8333L 38.7917,53.8333L 22.1667,38L 38.7917,22.1667L 49.4792,22.1667L 33.6458,38 Z "/&gt;
                &lt;/Viewbox&gt;
            &lt;/Button&gt;
            &lt;TextBlock x:Name="Caption" Text="Settings" FontSize="20" VerticalAlignment="Center"/&gt;
        &lt;/StackPanel&gt;
        &lt;ListBox Grid.Row="1" x:Name="SettingViewModels" Visibility="Visible" /&gt;
        &lt;ContentPresenter Grid.Row="1" x:Name="ViewModelPresenter"  
                          ContentTemplateSelector="{StaticResource templateSelector}"
                          /&gt;
    &lt;/Grid&gt;
&lt;/UserControl&gt;
</code></pre>

<p>アイコンのジオメトリも前回同様に<a href="http://modernuiicons.com/">Alex Peattie</a>さんのものを利用しています。</p>

<p>ボタンは丸く描画されるように <code>Style="{DynamicResource EllipseButtonStyle}"</code> としてスタイルをリソースとして切り出し、コンテンツにジオメトリを設定しています。</p>

<p>切り出したスタイルは単に  <code>&lt;Setter Property="Template"&gt;</code> としてControlTemplateを設定する際に、Mindwos 8 Styleではフラットで角なしの線を描画するために <code>&lt;Border&gt;</code> としましたが、これを <code>&lt;Ellipse&gt;</code> として丸にすればそれだけでOKです。</p>

<p>ボタンを押したときの内部動作はコードビハインド上で記述しています。<br/>
(クラス ライブラリとしての開発)</p>

<p>アプリケーション構成ファイルに任意のViewModelを設定すると、それが設定画面の一覧に表示されるようにしました。</p>

<p><img src="http://s-ueno.github.io/images/wpf-08-04.png" alt="wpf-08-04" /></p>

<p>あとは、これをWindow Style で定義しているグリッド上にコンテンツとして配置するだけです。</p>

<h2>アニメーション</h2>

<p>ボタンを押下する度に先ほど作成したユーザーコントロールがWindowとしてモーダル表示されたり、画面上にパッとでたり消えたりするのは、利用者としては新鮮さにかけます。
XAMLで作成するアプリケーションのゴールは、やはり柔軟なアニメーションを利用者に体験してもらうことにあります。</p>

<p>今回は、そんなアニメーションを添付プロパティとして切り出して実装しています。</p>

<pre><code>
  public enum TransitionStyle
    {
        None,

        Slide,
        VerticalSlide,

        SlideOut,
        VerticalSlideOut,
    }

    public class ViewTransition
    {
        public static TransitionStyle GetTransitionStyle(DependencyObject obj)
        {
            return (TransitionStyle)obj.GetValue(TransitionStyleProperty);
        }

        public static void SetTransitionStyle(DependencyObject obj, TransitionStyle value)
        {
            obj.SetValue(TransitionStyleProperty, value);
        }

        // Using a DependencyProperty as the backing store for TransitionStyle.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty TransitionStyleProperty =
            DependencyProperty.RegisterAttached("TransitionStyle", typeof(TransitionStyle), typeof(ViewTransition), new UIPropertyMetadata(TransitionStyle.None, OnTransitionStyleChanged));

        private static void OnTransitionStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var fw = d as FrameworkElement;
            var style = e.NewValue as TransitionStyle?;
            if (!style.HasValue || style == TransitionStyle.None)
                return;

            fw.Loaded -= fw_Loaded;
            fw.Loaded += fw_Loaded;
        }

        static void fw_Loaded(object sender, RoutedEventArgs e)
        {
            var fw = (FrameworkElement)sender;
            var style = GetTransitionStyle(fw);

            Play(fw, style);
        }

        public static Storyboard Play(FrameworkElement target, TransitionStyle style, Action completedAction = null)
        {
            Storyboard storyboard = null;
            switch (style)
            {
                case TransitionStyle.None:
                    break;
                case TransitionStyle.Slide:
                    storyboard = CreateSlideStoryboard();
                    break;
                case TransitionStyle.VerticalSlide:
                    storyboard = CreateVerticalSlideStoryboard();
                    break;
                case TransitionStyle.SlideOut:
                    storyboard = CreateSlideStoryboard(false);
                    break;
                case TransitionStyle.VerticalSlideOut:
                    storyboard = CreateVerticalSlideStoryboard(false);
                    break;
                default:
                    break;
            }
            if (completedAction != null)
                storyboard.Completed += (x, y) =&gt; completedAction();
            storyboard.Begin(target);
            return storyboard;
        }

        private static Storyboard CreateSlideStoryboard(bool isFadeIn = true)
        {
            var storyboard = new Storyboard();

            var fromThickness = isFadeIn ? new Thickness(30, 0, -30, 0) : new Thickness(0);
            var toThickness = isFadeIn ? new Thickness(0) : new Thickness(30, 0, -30, 0);

            var slideAnimation = new ThicknessAnimation();
            slideAnimation.From = fromThickness;
            slideAnimation.To = toThickness;
            slideAnimation.Duration = new Duration(TimeSpan.FromSeconds(0.3));

            Storyboard.SetTargetProperty(slideAnimation, new PropertyPath(FrameworkElement.MarginProperty));
            storyboard.Children.Add(slideAnimation);

            var fromOpacity = isFadeIn ? 0 : 1;
            var toOpacity = isFadeIn ? 1 : 0;

            var opacityAnimation = new DoubleAnimation();
            opacityAnimation.From = fromOpacity;
            opacityAnimation.To = toOpacity;
            opacityAnimation.Duration = new Duration(TimeSpan.FromSeconds(0.5));
            Storyboard.SetTargetProperty(opacityAnimation, new PropertyPath(FrameworkElement.OpacityProperty));
            storyboard.Children.Add(opacityAnimation);

            return storyboard;
        }

        private static Storyboard CreateVerticalSlideStoryboard(bool isFadeIn = true)
        {
            var storyboard = new Storyboard();

            var fromThickness = isFadeIn ? new Thickness(0, 30, 0, -30) : new Thickness(0);
            var toThickness = isFadeIn ? new Thickness(0) : new Thickness(0, 30, 0, -30);


            var slideAnimation = new ThicknessAnimation();
            slideAnimation.From = fromThickness;
            slideAnimation.To = toThickness;
            slideAnimation.Duration = new Duration(TimeSpan.FromSeconds(0.3));

            Storyboard.SetTargetProperty(slideAnimation, new PropertyPath(FrameworkElement.MarginProperty));
            storyboard.Children.Add(slideAnimation);

            var fromOpacity = isFadeIn ? 0 : 1;
            var toOpacity = isFadeIn ? 1 : 0;

            var opacityAnimation = new DoubleAnimation();
            opacityAnimation.From = fromOpacity;
            opacityAnimation.To = toOpacity;
            opacityAnimation.Duration = new Duration(TimeSpan.FromSeconds(0.5));
            Storyboard.SetTargetProperty(opacityAnimation, new PropertyPath(FrameworkElement.OpacityProperty));
            storyboard.Children.Add(opacityAnimation);

            return storyboard;
        }

    }
</code></pre>

<p>Xaml上で設定すれば、コンテンツの読み込み時に自動でアニメーションをするようになります。</p>

<p><img src="http://s-ueno.github.io/images/wpf-08-05.png" alt="wpf-08-05" /></p>

<p>また静的メソッドを利用して、任意のタイミングでも動作します。</p>

<h2>まとめ</h2>

<p>ユーザーコントロールで作成したストアアプリスタイルの設定画面を設け、スタイルの変更ができるようになりました。</p>

<p><img src="http://s-ueno.github.io/images/wpf-08-06.png" alt="wpf-08-06" /></p>

<p><img src="http://s-ueno.github.io/images/wpf-08-07.png" alt="wpf-08-07" /></p>

<p>ただし、設定したユーザー固有のスタイルはまだ永続化していません。<br/>
また、TabControlを利用していますが、このコンテンツはどうしても旧来のWindows Formを彷彿させる、モダンではないビシュアルです。</p>

<p>次回の宿題は、ユーザー固有のスタイルは <a href="http://msdn.microsoft.com/ja-jp/library/system.io.isolatedstorage.aspx">IsolatedStorage</a> の機能を利用して永続化したいと思います。
それと、Controlから派生したItemsControlを利用して、モダンなカスタム コントロールを作成したいと思います。</p>

<p>サンプル成果物はGit管理で。</p>

<p><a href="https://github.com/s-ueno/uENLab">@s-ueno/uENLab</a> on GitHub</p>

<hr />
]]></content>
  </entry>
  
</feed>
