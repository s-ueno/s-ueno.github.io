<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: wpf | uEN Laboratory]]></title>
  <link href="http://s-ueno.github.io/blog/categories/wpf/atom.xml" rel="self"/>
  <link href="http://s-ueno.github.io/"/>
  <updated>2014-12-14T20:08:48+09:00</updated>
  <id>http://s-ueno.github.io/</id>
  <author>
    <name><![CDATA[uEN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Modern Style ComboBox]]></title>
    <link href="http://s-ueno.github.io/blog/2014/12/14/wpf-16/"/>
    <updated>2014-12-14T20:06:57+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/12/14/wpf-16</id>
    <content type="html"><![CDATA[<p><a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.combobox.aspx">ComboBox</a> は <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemscontrol.aspx">ItemsControl</a> 派生なので、コンテナとして自分自身のスタイル
が一つと、その中にある一つ一つの項目に対しての <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.comboboxitem.aspx">ComboBoxItem</a> スタイル
この二つで いつものコンボボックス になります。</p>

<!-- more -->


<p>さらに、コンテナは 右にボタンを持ち、クリックすればドロップダウンが表示され
プロパティの設定によっては、編集可能なTextBoxとして機能することもできます。</p>

<p>では、いつものように VisualStudio のデザイナ上で
右クリック ⇒ テンプレートの編集 ⇒ コピーして編集
でテンプレートを取得・・・してもいいのですが、そうすると
一つ問題が出てきます。</p>

<p>自動生成する Template が現在適用されているWPFのテーマにそぐうための
アセンブリを強制的に参照することです。</p>

<p>こんな風に</p>

<pre><code>xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" 
</code></pre>

<p>回避する方法は、アセンブリを配布するとかGuidレベルの参照に変えるとかいろいろ
あるのですが、テキストボックス、ボタン、ドロップダウンで構成される
ただの便利コントロールに外部アセンブリを一つ追加するまでもありません。</p>

<p>ただ、いちから作成するのも大変なので MSDN が提供してくれる土台を
利用してみたいと思います。</p>

<p><a href="http://msdn.microsoft.com/ja-jp/library/ms752094.aspx">ComboBox のスタイルとテンプレート</a></p>

<blockquote><p>サンプル全体については、 「ControlTemplate を使用したスタイル設定のサンプル」を参照してください。.</p></blockquote>

<p>ここから取得します。</p>

<p>テンプレートやStyleをカスタマイズする開発者には垂涎もののサンプルです。</p>

<p>WPF組み込みコントロールは、どうしても .Net Framework の都合によるもの
が出てくるので、そういったものを考えた上で提供してくれるStyleはありがたいです。</p>

<p>ここから ComboBox のベースとなるStyleを利用したいと思います。</p>

<p>このMSDNサンプルが提供してくれるノイズのない情報を有効に利用したいと思います。</p>

<p>ですが！
本業の都合で、最近は家路につくのが日が変わっていて、ブログの更新の
ための時間が取れにくくなっています(涙)</p>

<p>この状況には、今年限りで決着を付けたいと考えています。</p>

<p>12月はほそぼそと更新することになりそうですが、新年からは
しっかりと情報を発信できればと思います。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Style ToggleButton]]></title>
    <link href="http://s-ueno.github.io/blog/2014/12/06/wpf-15/"/>
    <updated>2014-12-06T17:48:15+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/12/06/wpf-15</id>
    <content type="html"><![CDATA[<p>CheckBox と RadioButton の Style を カスタマイズします。</p>

<!-- more -->


<p>[CheckBox] と [RadioButton] ですが その挙動に関しては異なりますが、外観に関しては
Checked、Unchecked、Null の三つの状態とテキストをユーザーに表示するという点で
同じように取り扱えます。</p>

<p>そのため Style に関しては [ToggleButton] というベースクラスにキー名を設定して
作成することも可能です。</p>

<p>まずは、前回と同様に土台を取得するため VisualStudio のデザイナ上で
ChekBox( もしくは RadioButton ) を右クリック ⇒ テンプレートの編集 ⇒ コピーして編集で生成される
テンプレートを利用したいと思います。</p>

<p>![wpf-15-01]</p>

<p>ちなみに FocusVisual は {x:null} で未設定とするので生成されるテンプレートからは外します。</p>

<p>生成されたのがコレです。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;SolidColorBrush x:Key="RadioButton.Static.Background" Color="#FFFFFFFF"/&gt;
</span><span class='line'>&lt;SolidColorBrush x:Key="RadioButton.Static.Border" Color="#FF707070"/&gt;
</span><span class='line'>&lt;SolidColorBrush x:Key="RadioButton.MouseOver.Background" Color="#FFF3F9FF"/&gt;
</span><span class='line'>&lt;SolidColorBrush x:Key="RadioButton.MouseOver.Border" Color="#FF5593FF"/&gt;
</span><span class='line'>&lt;SolidColorBrush x:Key="RadioButton.MouseOver.Glyph" Color="#FF212121"/&gt;
</span><span class='line'>&lt;SolidColorBrush x:Key="RadioButton.Disabled.Background" Color="#FFE6E6E6"/&gt;
</span><span class='line'>&lt;SolidColorBrush x:Key="RadioButton.Disabled.Border" Color="#FFBCBCBC"/&gt;
</span><span class='line'>&lt;SolidColorBrush x:Key="RadioButton.Disabled.Glyph" Color="#FF707070"/&gt;
</span><span class='line'>&lt;SolidColorBrush x:Key="RadioButton.Pressed.Background" Color="#FFD9ECFF"/&gt;
</span><span class='line'>&lt;SolidColorBrush x:Key="RadioButton.Pressed.Border" Color="#FF3C77DD"/&gt;
</span><span class='line'>&lt;SolidColorBrush x:Key="RadioButton.Pressed.Glyph" Color="#FF212121"/&gt;
</span><span class='line'>&lt;SolidColorBrush x:Key="RadioButton.Static.Glyph" Color="#FF212121"/&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>
</span><span class='line'>これをカスタマイズの元にして、最初に TargetType="{x:Type ToggleButton}" とし
</span><span class='line'>CheckBox と RadioButton のベースのスタイルとして宣言します。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>また、お決まりの Background や Foreground を DynamicResource に変更します。
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>次に生成されたテンプレートを見ると
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;Grid.ColumnDefinitions&gt;
</span><span class='line'>    &lt;ColumnDefinition Width="Auto"/&gt;
</span><span class='line'>    &lt;ColumnDefinition Width="*"/&gt;
</span><span class='line'>&lt;/Grid.ColumnDefinitions&gt;</span></code></pre></td></tr></table></div></figure></p>

<p>として、左側列にチェックマーク、右側列に可変のテキストエリアを用意しているのがわかります。</p>

<p>今回は、RadioButton をベースクラスに利用しましたが、中身をみると Border の  CornerRadius=&ldquo;100&rdquo;
として丸い境界を宣言し、さらにその中に <code>&lt;Ellipse</code> で 少し小さい丸を描いているのが
わかります。</p>

<p>たしかに、そんな外観をしています。</p>

<p>![wpf-15-02]</p>

<p>チェックボックスだと、この角丸がなくなって四角になっているだけです。</p>

<p>このままだと可愛げがないので、こんな形で</p>

<p>![wpf-15-03]</p>

<p>赤ペン先生みたいなアイコン(Designed by [Alex Peattie] )をチェックマークに
使ってみたいと思います。</p>

<p>このとき普通に四角の中にジオメトリを描画するのではなく <code>Margin="2,-5,-2,2"</code> で
四角の枠から右上にはみ出すようにすると、それっぽくなります。</p>

<p>そんなこんなで、ToggleButton用のStyle は以下のようになりました。</p>

<p>&#8220;`</p>



<pre><code>

面白いのが RadioButton と CheckBox の外観に関しては
RadioButtonの場合だけ、角を丸く円のようにするだけの差しかなくてもソレっぽくなるところです。
</code></pre>

<p><Style TargetType="{x:Type CheckBox}"       BasedOn="{StaticResource ToggleButtonBase}" />
<Style TargetType="{x:Type RadioButton}"    BasedOn="{StaticResource ToggleButtonBase}" >
    <Setter Property="Border.CornerRadius" Value="45" />
</Style>
&#8220;`</p>

<p>そこをあえて、まったく異なるスタイルにして、スイッチみたいなデザインを
採用してみるのも面白いかもしれません。</p>

<p>![wpf-15-04]</p>

<hr />

<p>[CheckBox]:<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.checkbox.aspx">http://msdn.microsoft.com/ja-jp/library/system.windows.controls.checkbox.aspx</a>
[RadioButton]:<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.radiobutton.aspx">http://msdn.microsoft.com/ja-jp/library/system.windows.controls.radiobutton.aspx</a>
[ToggleButton]:<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.primitives.togglebutton.aspx">http://msdn.microsoft.com/ja-jp/library/system.windows.controls.primitives.togglebutton.aspx</a>
[Alex Peattie]:<a href="http://modernuiicons.com/">http://modernuiicons.com/</a></p>

<p>[wpf-15-01]:<a href="http://s-ueno.github.io/images/wpf-15-01.png">http://s-ueno.github.io/images/wpf-15-01.png</a>
[wpf-15-02]:<a href="http://s-ueno.github.io/images/wpf-15-02.png">http://s-ueno.github.io/images/wpf-15-02.png</a>
[wpf-15-03]:<a href="http://s-ueno.github.io/images/wpf-15-03.png">http://s-ueno.github.io/images/wpf-15-03.png</a>
[wpf-15-04]:<a href="http://s-ueno.github.io/images/wpf-15-04.png">http://s-ueno.github.io/images/wpf-15-04.png</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Style TextBox]]></title>
    <link href="http://s-ueno.github.io/blog/2014/12/02/wpf-14/"/>
    <updated>2014-12-02T22:10:27+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/12/02/wpf-14</id>
    <content type="html"><![CDATA[<p>TextBox の Style を Modern Style 対応します。</p>

<!-- more -->


<p>まずは土台を取得したいので、VisualStudio のデザイナ上で TextBox を右クリック
 ⇒ テンプレートの編集 ⇒ コピーして編集で生成されるテンプレートを利用したいと思います。</p>

<p><img src="http://s-ueno.github.io/images/wpf-14-01.png" alt="wpf-14-01" /></p>

<p>ちなみに、現在適用されているデフォルトのテーマで出力されるので、Windows 7 と 8 では違った値がでると思います。
で、8で出力されたのがコレ</p>

<pre><code>        &lt;SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/&gt;
        &lt;SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/&gt;
        &lt;SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/&gt;
        &lt;Style x:Key="TextBoxStyle1" TargetType="{x:Type TextBox}"&gt;
            &lt;Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/&gt;
            &lt;Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/&gt;
            &lt;Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/&gt;
            &lt;Setter Property="BorderThickness" Value="1"/&gt;
            &lt;Setter Property="KeyboardNavigation.TabNavigation" Value="None"/&gt;
            &lt;Setter Property="HorizontalContentAlignment" Value="Left"/&gt;
            &lt;Setter Property="FocusVisualStyle" Value="{x:Null}"/&gt;
            &lt;Setter Property="AllowDrop" Value="true"/&gt;
            &lt;Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/&gt;
            &lt;Setter Property="Stylus.IsFlicksEnabled" Value="False"/&gt;
            &lt;Setter Property="Template"&gt;
                &lt;Setter.Value&gt;
                    &lt;ControlTemplate TargetType="{x:Type TextBox}"&gt;
                        &lt;Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"&gt;
                            &lt;ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/&gt;
                        &lt;/Border&gt;
                        &lt;ControlTemplate.Triggers&gt;
                            &lt;Trigger Property="IsEnabled" Value="false"&gt;
                                &lt;Setter Property="Opacity" TargetName="border" Value="0.56"/&gt;
                            &lt;/Trigger&gt;
                            &lt;Trigger Property="IsMouseOver" Value="true"&gt;
                                &lt;Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/&gt;
                            &lt;/Trigger&gt;
                            &lt;Trigger Property="IsKeyboardFocused" Value="true"&gt;
                                &lt;Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/&gt;
                            &lt;/Trigger&gt;
                        &lt;/ControlTemplate.Triggers&gt;
                    &lt;/ControlTemplate&gt;
                &lt;/Setter.Value&gt;
            &lt;/Setter&gt;
            &lt;Style.Triggers&gt;
                &lt;MultiTrigger&gt;
                    &lt;MultiTrigger.Conditions&gt;
                        &lt;Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/&gt;
                        &lt;Condition Property="IsSelectionActive" Value="false"/&gt;
                    &lt;/MultiTrigger.Conditions&gt;
                    &lt;Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/&gt;
                &lt;/MultiTrigger&gt;
            &lt;/Style.Triggers&gt;
        &lt;/Style&gt;
</code></pre>

<p>訂正</p>

<p>よくみると、IsInactiveSelectionHighlightEnabledなので、フォーカスが外れた際のアクティブでない選択した項目の背景　でした・・・。
VisualStudio先生、すみませんでした。</p>

<p><del>
VS2013 Update 4 ですが、自動生成した MultiTrigger の Condition の設定値が実は逆というバグは愛嬌ということで(ニコッ)
</del></p>

<p>まず、シンプルなのが一目でわかります。<br/>
Triggerも非活性時には不透明度を設定することでそれっぽく見せるなど、小粋です。
リソースのキーが <code>x:Key="TextBox.MouseOver.Border"</code> とか <code>x:Key="TextBox.Focus.Border"</code> など、.で区切るところが
個人的にとても気に入りました。</p>

<p>ちなみに、ほとんど変える箇所はなく、現在 Background や Foreground が静的参照なので、これを
アプリケーションで統一的なキーに DynamicResource で置き換えるだけです。</p>

<p>WPFの組み込みコントロールで、特にLOB開発に利用するコントロールなどは限られているので、
こんな感じで、技術資産をためていくと、後の開発で楽にガバナンスを効かせられます。</p>

<p><img src="http://s-ueno.github.io/images/wpf-14-02.png" alt="wpf-14-02" /></p>

<p>で、作成したのがコレ。</p>

<pre><code>
    &lt;Style TargetType="{x:Type TextBox}"&gt;
        &lt;Setter Property="Background"       Value="{DynamicResource TextBox.Background}"/&gt;
        &lt;Setter Property="BorderBrush"      Value="{DynamicResource TextBox.BorderBrush}"/&gt;
        &lt;Setter Property="Foreground"       Value="{DynamicResource AppForeground}"/&gt;
        &lt;Setter Property="BorderThickness"  Value="1"/&gt;

        &lt;Setter Property="KeyboardNavigation.TabNavigation" Value="None"/&gt;
        &lt;Setter Property="HorizontalContentAlignment"       Value="Left"/&gt;
        &lt;Setter Property="FocusVisualStyle"                 Value="{x:Null}"/&gt;
        &lt;Setter Property="AllowDrop"                        Value="true"/&gt;
        &lt;Setter Property="ScrollViewer.PanningMode"         Value="VerticalFirst"/&gt;
        &lt;Setter Property="Stylus.IsFlicksEnabled"           Value="False"/&gt;
        &lt;Setter Property="Template"&gt;
            &lt;Setter.Value&gt;
                &lt;ControlTemplate TargetType="{x:Type TextBox}"&gt;
                    &lt;Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"&gt;
                        &lt;ScrollViewer x:Name="PART_ContentHost" Focusable="false" 
                                      HorizontalScrollBarVisibility="Hidden" 
                                      VerticalScrollBarVisibility="Hidden"/&gt;
                    &lt;/Border&gt;
                    &lt;ControlTemplate.Triggers&gt;
                        &lt;Trigger Property="IsEnabled" Value="false"&gt;
                            &lt;Setter Property="Opacity" TargetName="border" Value="0.56"/&gt;
                        &lt;/Trigger&gt;
                        &lt;Trigger Property="IsMouseOver" Value="true"&gt;
                            &lt;Setter Property="Background" TargetName="border" Value="{DynamicResource TextBox.MouseOver.Background}"/&gt;
                        &lt;/Trigger&gt;
                        &lt;Trigger Property="IsKeyboardFocused" Value="true"&gt;
                            &lt;Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource TextBox.Focus.Border}"/&gt;
                        &lt;/Trigger&gt;
                    &lt;/ControlTemplate.Triggers&gt;
                &lt;/ControlTemplate&gt;
            &lt;/Setter.Value&gt;
        &lt;/Setter&gt;
        &lt;Style.Triggers&gt;
            &lt;MultiTrigger&gt;
                &lt;MultiTrigger.Conditions&gt;
                    &lt;Condition Property="IsSelectionActive" Value="true"/&gt;
                &lt;/MultiTrigger.Conditions&gt;
                &lt;Setter Property="SelectionBrush" Value="{DynamicResource TextBox.SelectionBrush}"/&gt;
            &lt;/MultiTrigger&gt;
            &lt;MultiTrigger&gt;
                &lt;MultiTrigger.Conditions&gt;
                    &lt;Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/&gt;
                    &lt;Condition Property="IsSelectionActive" Value="false"/&gt;
                &lt;/MultiTrigger.Conditions&gt;
                &lt;Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/&gt;
            &lt;/MultiTrigger&gt;
        &lt;/Style.Triggers&gt;
    &lt;/Style&gt;
</code></pre>

<p>TextBoxまで作成すると、背景色を白ベースか黒ベースかという選択肢も追加できます。</p>

<p>テキストボックスの選択している箇所がブランドカラーになるのも美しいです。</p>

<p><img src="http://s-ueno.github.io/images/wpf-14-03.png" alt="wpf-14-03" /></p>

<p>TextBoxなどはまだ簡単なのですが、ラジオボタン、コンボボックスとなるにつれて、VisualStudioが自動生成してくれる
テンプレートが挑発的です。</p>

<p>次回は、ラジオボタンを紹介します。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WPF パンくずリストで画面遷移]]></title>
    <link href="http://s-ueno.github.io/blog/2014/11/29/wpf-13/"/>
    <updated>2014-11-29T02:35:15+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/11/29/wpf-13</id>
    <content type="html"><![CDATA[<p>ナビゲーターとしてのインターフェイス + Styleによるパンくずリストの外観を
併せ持つパンくずリストクラスです。</p>

<p><img src="http://s-ueno.github.io/images/wpf-13-01.png" alt="wpf-13-01" /></p>

<!-- more -->


<p>ベースクラスを <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemscontrol.aspx">ItemsControl</a> とするカスタム コントロールとして作成しました。<br/>
上部にメニューを配置し、中央部がメインコンテンツという最もシンプルなパターンです。</p>

<p>いつものごとく、Styleを利用して グリッド レイアウトで区切っていきます。</p>

<p><img src="http://s-ueno.github.io/images/wpf-13-02.png" alt="wpf-13-02" /></p>

<p>ここで、メインコンテンツと右上部のアイコンは増減しませんが、左上部のパンくずメニューは遷移によって
コンテンツが増減する、 <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemscontrol.aspx">ItemsControl</a> の実体の部分になります。</p>

<p>この実態部のコンテンツを表すのが <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemspresenter.aspx">ItemsPresenter</a> クラスです。</p>

<p>ItemsControl.Items プロパティにButtonを10個投入した場合、この <a href="http://msdn.microsoft.com/ja-jp/library/system.windows.controls.itemspresenter.aspx">ItemsPresenter</a> の箇所にButtonが10個表示されます。</p>

<p>ちなみに ItemsControl の実体が ItemsPresenter であり、
ContentControl の実体は ContentPresenter という、シンプルな名前です。</p>

<p>次に Item をどのようなパネルに展開するのかを決定するのが、 ItemsControl.ItemsPanel プロパティです。</p>

<p>メニューなので横に展開することができる <code>&lt;WrapPanel Orientation="Horizontal" /&gt;</code> を指定することで、要件を満たせます。</p>

<p>あとは右上に アイコンボタン(Designed by <a href="http://modernuiicons.com/">Alex Peattie</a> )
中央に ViewModel を指定するとそのViewを表示することができるカスタムの DataTemplateSelector
を指定した ContentPresenter を配置すると カスタム コントロールとしての外観は完成です。</p>

<p>60行程度のとてもシンプルな定義です。</p>

<p>&#8220;`
&lt;ui:ViewDataTemplateSelector x:Key=&ldquo;templateSelector&rdquo; /></p>



<p>&#8220;`</p>

<p>ナビゲーターとしてのインターフェイス　+　いつものごとくアニメーションをC#のコード上で実装すれば完成です。</p>

<p>ポイントがいくつかあるので紹介します。</p>

<ul>
<li>MEFの利用</li>
<li>アニメーション</li>
<li>NewWindowボタン</li>
<li><a href="http://msdn.microsoft.com/ja-jp/library/system.weakreference.aspx">WeakReference</a>の利用</li>
</ul>


<h2>MEFの利用</h2>

<p>Use添付プロパティを公開し、trueが設定されると自分自身をMEF経由でインスタンス化するようにしています。</p>

<p><img src="http://s-ueno.github.io/images/wpf-13-03.png" alt="wpf-13-03" /></p>

<p>設定側</p>

<p><img src="http://s-ueno.github.io/images/wpf-13-04.png" alt="wpf-13-04" /></p>

<h2>アニメーション</h2>

<p>パンくずメニューに新しくアイテムが追加されると、画面右側からButtonが飛んでくるアニメーションです。
これもシンプルで ItemsControl.Items プロパティ に Button を Add するタイミングで、 Storyboard を適用すればOKです。</p>

<h2>NewWindowボタン</h2>

<p>LOBアプリでは画面を見比べることもあるだろうと、NewWindowボタンを用意しました。
ボタン押下で表示しているメインコンテンツが新しいWindowsとして起動する機能です。</p>

<p><img src="http://s-ueno.github.io/images/wpf-13-05.png" alt="wpf-13-05" /></p>

<p>今は単純に新しいWindow表示していますが、どこかのタイミングでガバーフローとして
画面をスタックし、アニメーション表示する機能に差し替えたいと思います。</p>

<h2><a href="http://msdn.microsoft.com/ja-jp/library/system.weakreference.aspx">WeakReference</a>の利用</h2>

<p>最後に、<a href="http://msdn.microsoft.com/ja-jp/library/system.weakreference.aspx">WeakReference</a>についてです。</p>

<p>過去に紹介しましたが、親ViewModel が 子ViewModel を New し、それを ListCollectionView 経由で Tab 風に表示させたりしています。
ライフサイクル管理の基本は、Newした人が破棄まで担当するので、この場合は 親ViewModel が子ViewModelの破棄までを担当します。</p>

<p>このときに、ナビゲーターが直接子ViewModelのインスタンスへの参照を持ってしまうと、
メモリに残り続けてガベージコレクタの対象にならないようなことも十分に起こりえます。</p>

<p>ナビゲーターは指示されればViewModelを参照して遷移しますが、その参照は&#8221;弱い参照&#8221;である必要があります。
そこで利用するのが、<a href="http://msdn.microsoft.com/ja-jp/library/system.weakreference.aspx">WeakReference</a>です。</p>

<p>このクラス経由で参照する場合、ガベージコレクタは参照にカウントしないので、不要なメモリリークを防ぐことができます。</p>

<p>あと、いくつかの基本的な機能（TextBox、DataGrid、ToggleButton系）のModern Style化と拡張を紹介できれば、アプリケーション作成に入りたいと思います。</p>

<p>サンプルはコチラ
<a href="https://github.com/s-ueno/uENLab" rel="tooltip" title="uENLab">
  <img class="social_icon" alt="github icon" src="http://s-ueno.github.io/images/glyphicons_381_github.png">
</a></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ダイアログ メッセージのデザイン - WPF Vol 09]]></title>
    <link href="http://s-ueno.github.io/blog/2014/11/20/wpf-10/"/>
    <updated>2014-11-20T20:28:15+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/11/20/wpf-10</id>
    <content type="html"><![CDATA[<p>ストア アプリ風のダイアログ メッセージ を作成しました。<br/>
もちろん、アニメーションします。</p>

<p><img src="http://s-ueno.github.io/images/wpf-10-01.png" alt="wpf-10-01" /></p>

<!-- more -->


<p>これも、いつもの如くまずはグリッド デザインから始まります。</p>

<p><img src="http://s-ueno.github.io/images/wpf-10-02.png" alt="wpf-10-02" /></p>

<p>ちなみに図（と、デザイン）は<a href="http://msdn.microsoft.com/ja-jp/jj984295">ココ</a>です。<br/>
(XPS で配布しなさいよ!!@心の声)</p>

<p>Windows 8.1 UX ガイドライン というのが、どこかにあると思います。</p>

<p>さて、話を戻すとWindowのデフォルトStyle上で、グリッドを比率設定してデザインしました。</p>

<p><img src="http://s-ueno.github.io/images/wpf-10-03.png" alt="wpf-10-03" /></p>

<pre><code>&lt;Grid.RowDefinitions&gt;
    &lt;RowDefinition Height="2*" /&gt;
    &lt;RowDefinition Height="auto" /&gt;
    &lt;RowDefinition Height="2*" /&gt;
&lt;/Grid.RowDefinitions&gt;
</code></pre>

<p>作業手順ですが、今回のように具体的な図を基にする場合は、Excelにイメージを張り付けた後にセルの数を数えて、6個、3個、6個で比率だと 2対1対2 だね、という大雑把に設定しています。</p>

<p>次に、真ん中のメッセージタイトル、メッセージ内容、ボタンを大まかに区切っていきます。</p>

<pre><code>&lt;Grid.ColumnDefinitions&gt;
    &lt;ColumnDefinition Width="*" /&gt;
    &lt;ColumnDefinition Width="3*" /&gt;
    &lt;ColumnDefinition Width="*" /&gt;
&lt;/Grid.ColumnDefinitions&gt;
</code></pre>

<p>あとは、このVisibilityをVisibleにすると同時にアニメーションすれば完成です。
ちなみにこれを呼び出す側はViewModelに用意した拡張メソッドをCallするだけです。</p>

<p><img src="http://s-ueno.github.io/images/wpf-10-04.png" alt="wpf-10-04" /></p>

<p>今回のポイントは<a href="http://msdn.microsoft.com/ja-jp/library/system.windows.input.keyboardnavigation.aspx">KeyboardNavigation</a> クラスを利用した各種添付プロパティです。</p>

<p><img src="http://s-ueno.github.io/images/wpf-10-05.png" alt="wpf-10-05" /></p>

<p>メッセージ ダイアログなので、デフォルトでフォーカスがあたるボタンがあります。<br/>
この時にボタン以外にフォーカスが当たると困ります。</p>

<p>MSDNを見ると</p>

<blockquote><p>KeyboardNavigation  クラスは、ナビゲーション キーのいずれかが押されたときに、既定のキーボード フォーカスのナビゲーションを実装します。 ナビゲーション キーとは、Tab、Shift + Tab、Ctrl + Tab、Ctrl + Shift + Tab、上方向、下方向、左方向、および右方向の各キーを指します。</p></blockquote>

<p>とあります。</p>

<p>これらのキーを押してもボタン群だけフォーカスが当たるように添付プロパティを設定しています。</p>

<p>いつものごとく、サンプル成果物はGit管理で。</p>

<p><a href="https://github.com/s-ueno/uENLab">@s-ueno/uENLab</a> on GitHub</p>

<p>次回は画面遷移を考えてみます。</p>

<hr />
]]></content>
  </entry>
  
</feed>
