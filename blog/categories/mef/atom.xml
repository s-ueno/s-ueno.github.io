<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mef | uEN Laboratory]]></title>
  <link href="http://s-ueno.github.io/blog/categories/mef/atom.xml" rel="self"/>
  <link href="http://s-ueno.github.io/"/>
  <updated>2014-11-27T20:29:33+09:00</updated>
  <id>http://s-ueno.github.io/</id>
  <author>
    <name><![CDATA[uEN]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MEF で優先度を設けて取得できないか]]></title>
    <link href="http://s-ueno.github.io/blog/2014/11/25/wpf-11/"/>
    <updated>2014-11-25T23:22:15+09:00</updated>
    <id>http://s-ueno.github.io/blog/2014/11/25/wpf-11</id>
    <content type="html"><![CDATA[<p><a href="http://msdn.microsoft.com/ja-jp/library/dd460648.aspx">MEF</a> はMSDNだけみて使ってみたのですが、
もう少し使い勝手が良くならないか勉強しました。</p>

<!-- more -->


<p><a href="http://msdn.microsoft.com/ja-jp/library/dd460648.aspx">MEF</a> の基本は、実体化したいオブジェクトの取得元となる情報を <a href="http://msdn.microsoft.com/ja-jp/library/system.componentmodel.composition.primitives.composablepartcatalog.aspx">ComposablePartCatalog</a> クラスから派生した
<a href="http://msdn.microsoft.com/ja-jp/library/system.componentmodel.composition.hosting.assemblycatalog.aspx">AssemblyCatalog</a> クラス や<a href="http://msdn.microsoft.com/ja-jp/library/system.componentmodel.composition.hosting.typecatalog.aspx">TypeCatalog</a> クラス を用いてアセンブリやTypeの情報を
<a href="http://msdn.microsoft.com/ja-jp/library/system.componentmodel.composition.hosting.compositioncontainer.aspx">CompositionContainer</a> というコンテナに登録、このコンテナから実体化する
ことまでは直観的にわかりました。</p>

<p>ただ、Get××とかCreate××のような如何にもインスタンス取得できそうなメソッドがなく、
MSDNのサンプルでは <a href="http://msdn.microsoft.com/ja-jp/library/system.componentmodel.composition.attributedmodelservices.composeparts.aspx">container.ComposeParts</a> メソッド 呼び出すことで
メンバーに実体が割り当てられるという、あまり使い勝手がよくない状態でした。</p>

<p>当たり前のDIとして、以下のようなことができないのか</p>

<pre><code>    interface ITest
    {
    }
    class TestA : ITest
    {
    }
    class TestB : TestA
    {
    }


static void Sample()
{
    //優先度をもってTestA、TestBのいずれかを取得したい
    var service = Create&lt;ITest&gt;();
</code></pre>

<p>いろいろわかりました。</p>

<p>まず、<a href="http://msdn.microsoft.com/ja-jp/library/system.componentmodel.composition.attributedmodelservices.composeparts.aspx">container.ComposeParts</a> メソッド を利用しないサービス取得の場合は、Import属性は不要でした。
そもそも、<a href="http://msdn.microsoft.com/ja-jp/library/system.componentmodel.composition.attributedmodelservices.composeparts.aspx">container.ComposeParts</a> メソッド を利用するシーンの方が少ないような気もします。</p>

<p>何はともあれ、<a href="http://msdn.microsoft.com/ja-jp/library/system.componentmodel.composition.partcreationpolicyattribute.aspx">PartCreationPolicy属性</a>も付けます。<br/>
この属性を付与しない場合、コンテナからインスタンスを取得するとすべて同じインスタンスを返します。</p>

<p>これがデフォルト動作で、これでは困るので先ほどの属性を利用して、実体化する場合は新しいインスタンスとなるように明示します。</p>

<p>次に <a href="http://msdn.microsoft.com/ja-jp/library/system.componentmodel.composition.exportmetadataattribute.aspx">ExportMetadata属性</a> でオブジェクトに追加情報を付与します。</p>

<p>以下がサンプルの宣言です。</p>

<pre><code>
[PartCreationPolicy(CreationPolicy.NonShared)]
[ExportMetadata("Priority", 1)]
[Export(typeof(TestA))]
class TestA  { }

[PartCreationPolicy(CreationPolicy.NonShared)]
[ExportMetadata("Priority", 0)]
[Export(typeof(TestA))]
class TestB : TestA { }
</code></pre>

<p>ExportMetadata属性で、&#8221;Priority&#8221; という優先度の付加情報を付与しました。<br/>
この取得方法が面白いです。</p>

<pre><code>
public interface IPriority { int Priority { get; } }
</code></pre>

<p>このように、&#8221;Priority&#8221; というプロパティ名を持つインターフェイスを宣言します。
ちなみに、このインターフェイスはどこも実装はされていません。</p>

<p>このインターフェイスが判断材料用のオブジェクトとして、コンテナによって動的に実態化されます。</p>

<p>以下がサンプルになります。
&#8220;`
    public static class Hoge
    {
        [PartCreationPolicy(CreationPolicy.NonShared)]
        [ExportMetadata(&ldquo;Priority&rdquo;, 1)]
        [Export(typeof(TestA))]
        class TestA  { }</p>

<pre><code>    [PartCreationPolicy(CreationPolicy.NonShared)]
    [ExportMetadata("Priority", 0)]
    [Export(typeof(TestA))]
    class TestB : TestA { }

    public static void Sample()
    {
        var service = Create&lt;TestA&gt;();

    }

    /// &lt;summary&gt;静的コンストラクタ&lt;/summary&gt;
    static Hoge()
    {
        var catalog = new AssemblyCatalog(Assembly.GetExecutingAssembly());
        Container = new CompositionContainer(catalog);
    }
    private static readonly CompositionContainer Container;

    public interface IPriority { int Priority { get; } }
    public static T Create&lt;T&gt;()
    {
        var list = Container.GetExports&lt;T, IPriority&gt;();
        var mostPriority = list.OrderBy(x =&gt; x.Metadata.Priority)
                               .FirstOrDefault();
        return mostPriority != null ? mostPriority.Value : default(T);
    }
}
</code></pre>

<p>&#8220;`</p>

<p><a href="http://msdn.microsoft.com/ja-jp/library/dd833149.aspx">GetExports</a> メソッドの型パラメーター 1 は、取得したい型で、
2つ目の引数は判断材料となる<a href="http://msdn.microsoft.com/ja-jp/library/system.componentmodel.composition.exportmetadataattribute.aspx">ExportMetadata属性</a> の情報を転送できる
任意のインターフェイスなりクラスとなります。</p>

<p>ここに IPriority インターフェイスを設定すると、コンテナがGUIDを利用して動的クラスを構築、生成し、
そのメンバに属性値を割り当ててくれます。</p>

<p>そのため、その任意の判断材料を利用して複数のクラスからある特定のクラスを返すことができるようになります。</p>

<p>今回は Priority という優先度のサンプルでしたが、たとえばデータベースのサービス名などを文字として
切り分け判断材料に利用すれば、データベース非依存のサービスなどいろいろと応用ができそうです。</p>

<hr />
]]></content>
  </entry>
  
</feed>
